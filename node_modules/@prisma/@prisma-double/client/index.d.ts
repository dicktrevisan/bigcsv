
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Dimp2020
 * 
 */
export type Dimp2020 = $Result.DefaultSelection<Prisma.$Dimp2020Payload>
/**
 * Model Dimp2021
 * 
 */
export type Dimp2021 = $Result.DefaultSelection<Prisma.$Dimp2021Payload>
/**
 * Model Dimp2022
 * 
 */
export type Dimp2022 = $Result.DefaultSelection<Prisma.$Dimp2022Payload>
/**
 * Model Dimp2023
 * 
 */
export type Dimp2023 = $Result.DefaultSelection<Prisma.$Dimp2023Payload>
/**
 * Model Dimp2024
 * 
 */
export type Dimp2024 = $Result.DefaultSelection<Prisma.$Dimp2024Payload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Competencia
 * 
 */
export type Competencia = $Result.DefaultSelection<Prisma.$CompetenciaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dimp2020s
 * const dimp2020s = await prisma.dimp2020.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dimp2020s
   * const dimp2020s = await prisma.dimp2020.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.dimp2020`: Exposes CRUD operations for the **Dimp2020** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimp2020s
    * const dimp2020s = await prisma.dimp2020.findMany()
    * ```
    */
  get dimp2020(): Prisma.Dimp2020Delegate<ExtArgs>;

  /**
   * `prisma.dimp2021`: Exposes CRUD operations for the **Dimp2021** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimp2021s
    * const dimp2021s = await prisma.dimp2021.findMany()
    * ```
    */
  get dimp2021(): Prisma.Dimp2021Delegate<ExtArgs>;

  /**
   * `prisma.dimp2022`: Exposes CRUD operations for the **Dimp2022** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimp2022s
    * const dimp2022s = await prisma.dimp2022.findMany()
    * ```
    */
  get dimp2022(): Prisma.Dimp2022Delegate<ExtArgs>;

  /**
   * `prisma.dimp2023`: Exposes CRUD operations for the **Dimp2023** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimp2023s
    * const dimp2023s = await prisma.dimp2023.findMany()
    * ```
    */
  get dimp2023(): Prisma.Dimp2023Delegate<ExtArgs>;

  /**
   * `prisma.dimp2024`: Exposes CRUD operations for the **Dimp2024** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dimp2024s
    * const dimp2024s = await prisma.dimp2024.findMany()
    * ```
    */
  get dimp2024(): Prisma.Dimp2024Delegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.competencia`: Exposes CRUD operations for the **Competencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competencias
    * const competencias = await prisma.competencia.findMany()
    * ```
    */
  get competencia(): Prisma.CompetenciaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Dimp2020: 'Dimp2020',
    Dimp2021: 'Dimp2021',
    Dimp2022: 'Dimp2022',
    Dimp2023: 'Dimp2023',
    Dimp2024: 'Dimp2024',
    User: 'User',
    Competencia: 'Competencia'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'dimp2020' | 'dimp2021' | 'dimp2022' | 'dimp2023' | 'dimp2024' | 'user' | 'competencia'
      txIsolationLevel: never
    },
    model: {
      Dimp2020: {
        payload: Prisma.$Dimp2020Payload<ExtArgs>
        fields: Prisma.Dimp2020FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Dimp2020FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Dimp2020FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          findFirst: {
            args: Prisma.Dimp2020FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Dimp2020FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          findMany: {
            args: Prisma.Dimp2020FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>[]
          }
          create: {
            args: Prisma.Dimp2020CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          createMany: {
            args: Prisma.Dimp2020CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Dimp2020DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          update: {
            args: Prisma.Dimp2020UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          deleteMany: {
            args: Prisma.Dimp2020DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Dimp2020UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Dimp2020UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2020Payload>
          }
          aggregate: {
            args: Prisma.Dimp2020AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimp2020>
          }
          groupBy: {
            args: Prisma.Dimp2020GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2020GroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.Dimp2020FindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.Dimp2020AggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.Dimp2020CountArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2020CountAggregateOutputType> | number
          }
        }
      }
      Dimp2021: {
        payload: Prisma.$Dimp2021Payload<ExtArgs>
        fields: Prisma.Dimp2021FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Dimp2021FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Dimp2021FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          findFirst: {
            args: Prisma.Dimp2021FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Dimp2021FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          findMany: {
            args: Prisma.Dimp2021FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>[]
          }
          create: {
            args: Prisma.Dimp2021CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          createMany: {
            args: Prisma.Dimp2021CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Dimp2021DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          update: {
            args: Prisma.Dimp2021UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          deleteMany: {
            args: Prisma.Dimp2021DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Dimp2021UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Dimp2021UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2021Payload>
          }
          aggregate: {
            args: Prisma.Dimp2021AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimp2021>
          }
          groupBy: {
            args: Prisma.Dimp2021GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2021GroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.Dimp2021FindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.Dimp2021AggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.Dimp2021CountArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2021CountAggregateOutputType> | number
          }
        }
      }
      Dimp2022: {
        payload: Prisma.$Dimp2022Payload<ExtArgs>
        fields: Prisma.Dimp2022FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Dimp2022FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Dimp2022FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          findFirst: {
            args: Prisma.Dimp2022FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Dimp2022FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          findMany: {
            args: Prisma.Dimp2022FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>[]
          }
          create: {
            args: Prisma.Dimp2022CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          createMany: {
            args: Prisma.Dimp2022CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Dimp2022DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          update: {
            args: Prisma.Dimp2022UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          deleteMany: {
            args: Prisma.Dimp2022DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Dimp2022UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Dimp2022UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2022Payload>
          }
          aggregate: {
            args: Prisma.Dimp2022AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimp2022>
          }
          groupBy: {
            args: Prisma.Dimp2022GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2022GroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.Dimp2022FindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.Dimp2022AggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.Dimp2022CountArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2022CountAggregateOutputType> | number
          }
        }
      }
      Dimp2023: {
        payload: Prisma.$Dimp2023Payload<ExtArgs>
        fields: Prisma.Dimp2023FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Dimp2023FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Dimp2023FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          findFirst: {
            args: Prisma.Dimp2023FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Dimp2023FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          findMany: {
            args: Prisma.Dimp2023FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>[]
          }
          create: {
            args: Prisma.Dimp2023CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          createMany: {
            args: Prisma.Dimp2023CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Dimp2023DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          update: {
            args: Prisma.Dimp2023UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          deleteMany: {
            args: Prisma.Dimp2023DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Dimp2023UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Dimp2023UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2023Payload>
          }
          aggregate: {
            args: Prisma.Dimp2023AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimp2023>
          }
          groupBy: {
            args: Prisma.Dimp2023GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2023GroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.Dimp2023FindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.Dimp2023AggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.Dimp2023CountArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2023CountAggregateOutputType> | number
          }
        }
      }
      Dimp2024: {
        payload: Prisma.$Dimp2024Payload<ExtArgs>
        fields: Prisma.Dimp2024FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Dimp2024FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Dimp2024FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          findFirst: {
            args: Prisma.Dimp2024FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Dimp2024FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          findMany: {
            args: Prisma.Dimp2024FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>[]
          }
          create: {
            args: Prisma.Dimp2024CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          createMany: {
            args: Prisma.Dimp2024CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Dimp2024DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          update: {
            args: Prisma.Dimp2024UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          deleteMany: {
            args: Prisma.Dimp2024DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Dimp2024UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Dimp2024UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Dimp2024Payload>
          }
          aggregate: {
            args: Prisma.Dimp2024AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDimp2024>
          }
          groupBy: {
            args: Prisma.Dimp2024GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2024GroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.Dimp2024FindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.Dimp2024AggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.Dimp2024CountArgs<ExtArgs>,
            result: $Utils.Optional<Dimp2024CountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Competencia: {
        payload: Prisma.$CompetenciaPayload<ExtArgs>
        fields: Prisma.CompetenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetenciaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetenciaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          findFirst: {
            args: Prisma.CompetenciaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetenciaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          findMany: {
            args: Prisma.CompetenciaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>[]
          }
          create: {
            args: Prisma.CompetenciaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          createMany: {
            args: Prisma.CompetenciaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompetenciaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          update: {
            args: Prisma.CompetenciaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          deleteMany: {
            args: Prisma.CompetenciaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompetenciaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompetenciaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompetenciaPayload>
          }
          aggregate: {
            args: Prisma.CompetenciaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompetencia>
          }
          groupBy: {
            args: Prisma.CompetenciaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompetenciaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CompetenciaFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.CompetenciaAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.CompetenciaCountArgs<ExtArgs>,
            result: $Utils.Optional<CompetenciaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Dimp2020
   */

  export type AggregateDimp2020 = {
    _count: Dimp2020CountAggregateOutputType | null
    _avg: Dimp2020AvgAggregateOutputType | null
    _sum: Dimp2020SumAggregateOutputType | null
    _min: Dimp2020MinAggregateOutputType | null
    _max: Dimp2020MaxAggregateOutputType | null
  }

  export type Dimp2020AvgAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2020SumAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2020MinAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2020MaxAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2020CountAggregateOutputType = {
    id: number
    cnpjDeclarante: number
    nomeDeclarante: number
    competenciaDeclaracao: number
    cnpjCpfCliente: number
    nomeFantasiaCliente: number
    codigoMunicipioCliente: number
    nomeResponsavelCliente: number
    cnpjAdquirente: number
    dataOperacao: number
    operacaoSplit: number
    bandeiraCartao: number
    horaTransacao: number
    valorOperacao: number
    meioPagamento: number
    codTrans: number
    arquivoReferencia: number
    ano: number
    _all: number
  }


  export type Dimp2020AvgAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2020SumAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2020MinAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2020MaxAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2020CountAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
    _all?: true
  }

  export type Dimp2020AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2020 to aggregate.
     */
    where?: Dimp2020WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2020s to fetch.
     */
    orderBy?: Dimp2020OrderByWithRelationInput | Dimp2020OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Dimp2020WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2020s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2020s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimp2020s
    **/
    _count?: true | Dimp2020CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dimp2020AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dimp2020SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dimp2020MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dimp2020MaxAggregateInputType
  }

  export type GetDimp2020AggregateType<T extends Dimp2020AggregateArgs> = {
        [P in keyof T & keyof AggregateDimp2020]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimp2020[P]>
      : GetScalarType<T[P], AggregateDimp2020[P]>
  }




  export type Dimp2020GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Dimp2020WhereInput
    orderBy?: Dimp2020OrderByWithAggregationInput | Dimp2020OrderByWithAggregationInput[]
    by: Dimp2020ScalarFieldEnum[] | Dimp2020ScalarFieldEnum
    having?: Dimp2020ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dimp2020CountAggregateInputType | true
    _avg?: Dimp2020AvgAggregateInputType
    _sum?: Dimp2020SumAggregateInputType
    _min?: Dimp2020MinAggregateInputType
    _max?: Dimp2020MaxAggregateInputType
  }

  export type Dimp2020GroupByOutputType = {
    id: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia: string | null
    ano: string
    _count: Dimp2020CountAggregateOutputType | null
    _avg: Dimp2020AvgAggregateOutputType | null
    _sum: Dimp2020SumAggregateOutputType | null
    _min: Dimp2020MinAggregateOutputType | null
    _max: Dimp2020MaxAggregateOutputType | null
  }

  type GetDimp2020GroupByPayload<T extends Dimp2020GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dimp2020GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dimp2020GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dimp2020GroupByOutputType[P]>
            : GetScalarType<T[P], Dimp2020GroupByOutputType[P]>
        }
      >
    >


  export type Dimp2020Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }, ExtArgs["result"]["dimp2020"]>

  export type Dimp2020SelectScalar = {
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }



  export type $Dimp2020Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimp2020"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpjDeclarante: string
      nomeDeclarante: string
      competenciaDeclaracao: string
      cnpjCpfCliente: string
      nomeFantasiaCliente: string
      codigoMunicipioCliente: string
      nomeResponsavelCliente: string | null
      cnpjAdquirente: string | null
      dataOperacao: string
      operacaoSplit: string
      bandeiraCartao: string | null
      horaTransacao: string
      valorOperacao: number
      meioPagamento: string
      codTrans: string
      arquivoReferencia: string | null
      ano: string
    }, ExtArgs["result"]["dimp2020"]>
    composites: {}
  }


  type Dimp2020GetPayload<S extends boolean | null | undefined | Dimp2020DefaultArgs> = $Result.GetResult<Prisma.$Dimp2020Payload, S>

  type Dimp2020CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Dimp2020FindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Dimp2020CountAggregateInputType | true
    }

  export interface Dimp2020Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimp2020'], meta: { name: 'Dimp2020' } }
    /**
     * Find zero or one Dimp2020 that matches the filter.
     * @param {Dimp2020FindUniqueArgs} args - Arguments to find a Dimp2020
     * @example
     * // Get one Dimp2020
     * const dimp2020 = await prisma.dimp2020.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Dimp2020FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020FindUniqueArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimp2020 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Dimp2020FindUniqueOrThrowArgs} args - Arguments to find a Dimp2020
     * @example
     * // Get one Dimp2020
     * const dimp2020 = await prisma.dimp2020.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Dimp2020FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimp2020 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020FindFirstArgs} args - Arguments to find a Dimp2020
     * @example
     * // Get one Dimp2020
     * const dimp2020 = await prisma.dimp2020.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Dimp2020FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020FindFirstArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimp2020 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020FindFirstOrThrowArgs} args - Arguments to find a Dimp2020
     * @example
     * // Get one Dimp2020
     * const dimp2020 = await prisma.dimp2020.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Dimp2020FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2020s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimp2020s
     * const dimp2020s = await prisma.dimp2020.findMany()
     * 
     * // Get first 10 Dimp2020s
     * const dimp2020s = await prisma.dimp2020.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimp2020WithIdOnly = await prisma.dimp2020.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Dimp2020FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimp2020.
     * @param {Dimp2020CreateArgs} args - Arguments to create a Dimp2020.
     * @example
     * // Create one Dimp2020
     * const Dimp2020 = await prisma.dimp2020.create({
     *   data: {
     *     // ... data to create a Dimp2020
     *   }
     * })
     * 
    **/
    create<T extends Dimp2020CreateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020CreateArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimp2020s.
     *     @param {Dimp2020CreateManyArgs} args - Arguments to create many Dimp2020s.
     *     @example
     *     // Create many Dimp2020s
     *     const dimp2020 = await prisma.dimp2020.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Dimp2020CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimp2020.
     * @param {Dimp2020DeleteArgs} args - Arguments to delete one Dimp2020.
     * @example
     * // Delete one Dimp2020
     * const Dimp2020 = await prisma.dimp2020.delete({
     *   where: {
     *     // ... filter to delete one Dimp2020
     *   }
     * })
     * 
    **/
    delete<T extends Dimp2020DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020DeleteArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimp2020.
     * @param {Dimp2020UpdateArgs} args - Arguments to update one Dimp2020.
     * @example
     * // Update one Dimp2020
     * const dimp2020 = await prisma.dimp2020.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Dimp2020UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020UpdateArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimp2020s.
     * @param {Dimp2020DeleteManyArgs} args - Arguments to filter Dimp2020s to delete.
     * @example
     * // Delete a few Dimp2020s
     * const { count } = await prisma.dimp2020.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Dimp2020DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2020DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimp2020s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimp2020s
     * const dimp2020 = await prisma.dimp2020.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Dimp2020UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimp2020.
     * @param {Dimp2020UpsertArgs} args - Arguments to update or create a Dimp2020.
     * @example
     * // Update or create a Dimp2020
     * const dimp2020 = await prisma.dimp2020.upsert({
     *   create: {
     *     // ... data to create a Dimp2020
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimp2020 we want to update
     *   }
     * })
    **/
    upsert<T extends Dimp2020UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2020UpsertArgs<ExtArgs>>
    ): Prisma__Dimp2020Client<$Result.GetResult<Prisma.$Dimp2020Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2020s that matches the filter.
     * @param {Dimp2020FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dimp2020 = await prisma.dimp2020.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Dimp2020FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dimp2020.
     * @param {Dimp2020AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dimp2020 = await prisma.dimp2020.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Dimp2020AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Dimp2020s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020CountArgs} args - Arguments to filter Dimp2020s to count.
     * @example
     * // Count the number of Dimp2020s
     * const count = await prisma.dimp2020.count({
     *   where: {
     *     // ... the filter for the Dimp2020s we want to count
     *   }
     * })
    **/
    count<T extends Dimp2020CountArgs>(
      args?: Subset<T, Dimp2020CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dimp2020CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimp2020.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dimp2020AggregateArgs>(args: Subset<T, Dimp2020AggregateArgs>): Prisma.PrismaPromise<GetDimp2020AggregateType<T>>

    /**
     * Group by Dimp2020.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2020GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dimp2020GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dimp2020GroupByArgs['orderBy'] }
        : { orderBy?: Dimp2020GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dimp2020GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimp2020GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimp2020 model
   */
  readonly fields: Dimp2020FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimp2020.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Dimp2020Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimp2020 model
   */ 
  interface Dimp2020FieldRefs {
    readonly id: FieldRef<"Dimp2020", 'String'>
    readonly cnpjDeclarante: FieldRef<"Dimp2020", 'String'>
    readonly nomeDeclarante: FieldRef<"Dimp2020", 'String'>
    readonly competenciaDeclaracao: FieldRef<"Dimp2020", 'String'>
    readonly cnpjCpfCliente: FieldRef<"Dimp2020", 'String'>
    readonly nomeFantasiaCliente: FieldRef<"Dimp2020", 'String'>
    readonly codigoMunicipioCliente: FieldRef<"Dimp2020", 'String'>
    readonly nomeResponsavelCliente: FieldRef<"Dimp2020", 'String'>
    readonly cnpjAdquirente: FieldRef<"Dimp2020", 'String'>
    readonly dataOperacao: FieldRef<"Dimp2020", 'String'>
    readonly operacaoSplit: FieldRef<"Dimp2020", 'String'>
    readonly bandeiraCartao: FieldRef<"Dimp2020", 'String'>
    readonly horaTransacao: FieldRef<"Dimp2020", 'String'>
    readonly valorOperacao: FieldRef<"Dimp2020", 'Float'>
    readonly meioPagamento: FieldRef<"Dimp2020", 'String'>
    readonly codTrans: FieldRef<"Dimp2020", 'String'>
    readonly arquivoReferencia: FieldRef<"Dimp2020", 'String'>
    readonly ano: FieldRef<"Dimp2020", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dimp2020 findUnique
   */
  export type Dimp2020FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter, which Dimp2020 to fetch.
     */
    where: Dimp2020WhereUniqueInput
  }

  /**
   * Dimp2020 findUniqueOrThrow
   */
  export type Dimp2020FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter, which Dimp2020 to fetch.
     */
    where: Dimp2020WhereUniqueInput
  }

  /**
   * Dimp2020 findFirst
   */
  export type Dimp2020FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter, which Dimp2020 to fetch.
     */
    where?: Dimp2020WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2020s to fetch.
     */
    orderBy?: Dimp2020OrderByWithRelationInput | Dimp2020OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2020s.
     */
    cursor?: Dimp2020WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2020s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2020s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2020s.
     */
    distinct?: Dimp2020ScalarFieldEnum | Dimp2020ScalarFieldEnum[]
  }

  /**
   * Dimp2020 findFirstOrThrow
   */
  export type Dimp2020FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter, which Dimp2020 to fetch.
     */
    where?: Dimp2020WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2020s to fetch.
     */
    orderBy?: Dimp2020OrderByWithRelationInput | Dimp2020OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2020s.
     */
    cursor?: Dimp2020WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2020s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2020s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2020s.
     */
    distinct?: Dimp2020ScalarFieldEnum | Dimp2020ScalarFieldEnum[]
  }

  /**
   * Dimp2020 findMany
   */
  export type Dimp2020FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter, which Dimp2020s to fetch.
     */
    where?: Dimp2020WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2020s to fetch.
     */
    orderBy?: Dimp2020OrderByWithRelationInput | Dimp2020OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimp2020s.
     */
    cursor?: Dimp2020WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2020s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2020s.
     */
    skip?: number
    distinct?: Dimp2020ScalarFieldEnum | Dimp2020ScalarFieldEnum[]
  }

  /**
   * Dimp2020 create
   */
  export type Dimp2020CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * The data needed to create a Dimp2020.
     */
    data: XOR<Dimp2020CreateInput, Dimp2020UncheckedCreateInput>
  }

  /**
   * Dimp2020 createMany
   */
  export type Dimp2020CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimp2020s.
     */
    data: Dimp2020CreateManyInput | Dimp2020CreateManyInput[]
  }

  /**
   * Dimp2020 update
   */
  export type Dimp2020UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * The data needed to update a Dimp2020.
     */
    data: XOR<Dimp2020UpdateInput, Dimp2020UncheckedUpdateInput>
    /**
     * Choose, which Dimp2020 to update.
     */
    where: Dimp2020WhereUniqueInput
  }

  /**
   * Dimp2020 updateMany
   */
  export type Dimp2020UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimp2020s.
     */
    data: XOR<Dimp2020UpdateManyMutationInput, Dimp2020UncheckedUpdateManyInput>
    /**
     * Filter which Dimp2020s to update
     */
    where?: Dimp2020WhereInput
  }

  /**
   * Dimp2020 upsert
   */
  export type Dimp2020UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * The filter to search for the Dimp2020 to update in case it exists.
     */
    where: Dimp2020WhereUniqueInput
    /**
     * In case the Dimp2020 found by the `where` argument doesn't exist, create a new Dimp2020 with this data.
     */
    create: XOR<Dimp2020CreateInput, Dimp2020UncheckedCreateInput>
    /**
     * In case the Dimp2020 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Dimp2020UpdateInput, Dimp2020UncheckedUpdateInput>
  }

  /**
   * Dimp2020 delete
   */
  export type Dimp2020DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
    /**
     * Filter which Dimp2020 to delete.
     */
    where: Dimp2020WhereUniqueInput
  }

  /**
   * Dimp2020 deleteMany
   */
  export type Dimp2020DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2020s to delete
     */
    where?: Dimp2020WhereInput
  }

  /**
   * Dimp2020 findRaw
   */
  export type Dimp2020FindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2020 aggregateRaw
   */
  export type Dimp2020AggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2020 without action
   */
  export type Dimp2020DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2020
     */
    select?: Dimp2020Select<ExtArgs> | null
  }


  /**
   * Model Dimp2021
   */

  export type AggregateDimp2021 = {
    _count: Dimp2021CountAggregateOutputType | null
    _avg: Dimp2021AvgAggregateOutputType | null
    _sum: Dimp2021SumAggregateOutputType | null
    _min: Dimp2021MinAggregateOutputType | null
    _max: Dimp2021MaxAggregateOutputType | null
  }

  export type Dimp2021AvgAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2021SumAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2021MinAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2021MaxAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2021CountAggregateOutputType = {
    id: number
    cnpjDeclarante: number
    nomeDeclarante: number
    competenciaDeclaracao: number
    cnpjCpfCliente: number
    nomeFantasiaCliente: number
    codigoMunicipioCliente: number
    nomeResponsavelCliente: number
    cnpjAdquirente: number
    dataOperacao: number
    operacaoSplit: number
    bandeiraCartao: number
    horaTransacao: number
    valorOperacao: number
    meioPagamento: number
    codTrans: number
    arquivoReferencia: number
    ano: number
    _all: number
  }


  export type Dimp2021AvgAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2021SumAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2021MinAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2021MaxAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2021CountAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
    _all?: true
  }

  export type Dimp2021AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2021 to aggregate.
     */
    where?: Dimp2021WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2021s to fetch.
     */
    orderBy?: Dimp2021OrderByWithRelationInput | Dimp2021OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Dimp2021WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2021s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2021s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimp2021s
    **/
    _count?: true | Dimp2021CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dimp2021AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dimp2021SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dimp2021MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dimp2021MaxAggregateInputType
  }

  export type GetDimp2021AggregateType<T extends Dimp2021AggregateArgs> = {
        [P in keyof T & keyof AggregateDimp2021]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimp2021[P]>
      : GetScalarType<T[P], AggregateDimp2021[P]>
  }




  export type Dimp2021GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Dimp2021WhereInput
    orderBy?: Dimp2021OrderByWithAggregationInput | Dimp2021OrderByWithAggregationInput[]
    by: Dimp2021ScalarFieldEnum[] | Dimp2021ScalarFieldEnum
    having?: Dimp2021ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dimp2021CountAggregateInputType | true
    _avg?: Dimp2021AvgAggregateInputType
    _sum?: Dimp2021SumAggregateInputType
    _min?: Dimp2021MinAggregateInputType
    _max?: Dimp2021MaxAggregateInputType
  }

  export type Dimp2021GroupByOutputType = {
    id: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia: string | null
    ano: string
    _count: Dimp2021CountAggregateOutputType | null
    _avg: Dimp2021AvgAggregateOutputType | null
    _sum: Dimp2021SumAggregateOutputType | null
    _min: Dimp2021MinAggregateOutputType | null
    _max: Dimp2021MaxAggregateOutputType | null
  }

  type GetDimp2021GroupByPayload<T extends Dimp2021GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dimp2021GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dimp2021GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dimp2021GroupByOutputType[P]>
            : GetScalarType<T[P], Dimp2021GroupByOutputType[P]>
        }
      >
    >


  export type Dimp2021Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }, ExtArgs["result"]["dimp2021"]>

  export type Dimp2021SelectScalar = {
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }



  export type $Dimp2021Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimp2021"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpjDeclarante: string
      nomeDeclarante: string
      competenciaDeclaracao: string
      cnpjCpfCliente: string
      nomeFantasiaCliente: string
      codigoMunicipioCliente: string
      nomeResponsavelCliente: string | null
      cnpjAdquirente: string | null
      dataOperacao: string
      operacaoSplit: string
      bandeiraCartao: string | null
      horaTransacao: string
      valorOperacao: number
      meioPagamento: string
      codTrans: string
      arquivoReferencia: string | null
      ano: string
    }, ExtArgs["result"]["dimp2021"]>
    composites: {}
  }


  type Dimp2021GetPayload<S extends boolean | null | undefined | Dimp2021DefaultArgs> = $Result.GetResult<Prisma.$Dimp2021Payload, S>

  type Dimp2021CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Dimp2021FindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Dimp2021CountAggregateInputType | true
    }

  export interface Dimp2021Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimp2021'], meta: { name: 'Dimp2021' } }
    /**
     * Find zero or one Dimp2021 that matches the filter.
     * @param {Dimp2021FindUniqueArgs} args - Arguments to find a Dimp2021
     * @example
     * // Get one Dimp2021
     * const dimp2021 = await prisma.dimp2021.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Dimp2021FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021FindUniqueArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimp2021 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Dimp2021FindUniqueOrThrowArgs} args - Arguments to find a Dimp2021
     * @example
     * // Get one Dimp2021
     * const dimp2021 = await prisma.dimp2021.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Dimp2021FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimp2021 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021FindFirstArgs} args - Arguments to find a Dimp2021
     * @example
     * // Get one Dimp2021
     * const dimp2021 = await prisma.dimp2021.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Dimp2021FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021FindFirstArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimp2021 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021FindFirstOrThrowArgs} args - Arguments to find a Dimp2021
     * @example
     * // Get one Dimp2021
     * const dimp2021 = await prisma.dimp2021.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Dimp2021FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2021s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimp2021s
     * const dimp2021s = await prisma.dimp2021.findMany()
     * 
     * // Get first 10 Dimp2021s
     * const dimp2021s = await prisma.dimp2021.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimp2021WithIdOnly = await prisma.dimp2021.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Dimp2021FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimp2021.
     * @param {Dimp2021CreateArgs} args - Arguments to create a Dimp2021.
     * @example
     * // Create one Dimp2021
     * const Dimp2021 = await prisma.dimp2021.create({
     *   data: {
     *     // ... data to create a Dimp2021
     *   }
     * })
     * 
    **/
    create<T extends Dimp2021CreateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021CreateArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimp2021s.
     *     @param {Dimp2021CreateManyArgs} args - Arguments to create many Dimp2021s.
     *     @example
     *     // Create many Dimp2021s
     *     const dimp2021 = await prisma.dimp2021.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Dimp2021CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimp2021.
     * @param {Dimp2021DeleteArgs} args - Arguments to delete one Dimp2021.
     * @example
     * // Delete one Dimp2021
     * const Dimp2021 = await prisma.dimp2021.delete({
     *   where: {
     *     // ... filter to delete one Dimp2021
     *   }
     * })
     * 
    **/
    delete<T extends Dimp2021DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021DeleteArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimp2021.
     * @param {Dimp2021UpdateArgs} args - Arguments to update one Dimp2021.
     * @example
     * // Update one Dimp2021
     * const dimp2021 = await prisma.dimp2021.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Dimp2021UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021UpdateArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimp2021s.
     * @param {Dimp2021DeleteManyArgs} args - Arguments to filter Dimp2021s to delete.
     * @example
     * // Delete a few Dimp2021s
     * const { count } = await prisma.dimp2021.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Dimp2021DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2021DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimp2021s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimp2021s
     * const dimp2021 = await prisma.dimp2021.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Dimp2021UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimp2021.
     * @param {Dimp2021UpsertArgs} args - Arguments to update or create a Dimp2021.
     * @example
     * // Update or create a Dimp2021
     * const dimp2021 = await prisma.dimp2021.upsert({
     *   create: {
     *     // ... data to create a Dimp2021
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimp2021 we want to update
     *   }
     * })
    **/
    upsert<T extends Dimp2021UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2021UpsertArgs<ExtArgs>>
    ): Prisma__Dimp2021Client<$Result.GetResult<Prisma.$Dimp2021Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2021s that matches the filter.
     * @param {Dimp2021FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dimp2021 = await prisma.dimp2021.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Dimp2021FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dimp2021.
     * @param {Dimp2021AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dimp2021 = await prisma.dimp2021.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Dimp2021AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Dimp2021s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021CountArgs} args - Arguments to filter Dimp2021s to count.
     * @example
     * // Count the number of Dimp2021s
     * const count = await prisma.dimp2021.count({
     *   where: {
     *     // ... the filter for the Dimp2021s we want to count
     *   }
     * })
    **/
    count<T extends Dimp2021CountArgs>(
      args?: Subset<T, Dimp2021CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dimp2021CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimp2021.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dimp2021AggregateArgs>(args: Subset<T, Dimp2021AggregateArgs>): Prisma.PrismaPromise<GetDimp2021AggregateType<T>>

    /**
     * Group by Dimp2021.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2021GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dimp2021GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dimp2021GroupByArgs['orderBy'] }
        : { orderBy?: Dimp2021GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dimp2021GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimp2021GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimp2021 model
   */
  readonly fields: Dimp2021FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimp2021.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Dimp2021Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimp2021 model
   */ 
  interface Dimp2021FieldRefs {
    readonly id: FieldRef<"Dimp2021", 'String'>
    readonly cnpjDeclarante: FieldRef<"Dimp2021", 'String'>
    readonly nomeDeclarante: FieldRef<"Dimp2021", 'String'>
    readonly competenciaDeclaracao: FieldRef<"Dimp2021", 'String'>
    readonly cnpjCpfCliente: FieldRef<"Dimp2021", 'String'>
    readonly nomeFantasiaCliente: FieldRef<"Dimp2021", 'String'>
    readonly codigoMunicipioCliente: FieldRef<"Dimp2021", 'String'>
    readonly nomeResponsavelCliente: FieldRef<"Dimp2021", 'String'>
    readonly cnpjAdquirente: FieldRef<"Dimp2021", 'String'>
    readonly dataOperacao: FieldRef<"Dimp2021", 'String'>
    readonly operacaoSplit: FieldRef<"Dimp2021", 'String'>
    readonly bandeiraCartao: FieldRef<"Dimp2021", 'String'>
    readonly horaTransacao: FieldRef<"Dimp2021", 'String'>
    readonly valorOperacao: FieldRef<"Dimp2021", 'Float'>
    readonly meioPagamento: FieldRef<"Dimp2021", 'String'>
    readonly codTrans: FieldRef<"Dimp2021", 'String'>
    readonly arquivoReferencia: FieldRef<"Dimp2021", 'String'>
    readonly ano: FieldRef<"Dimp2021", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dimp2021 findUnique
   */
  export type Dimp2021FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter, which Dimp2021 to fetch.
     */
    where: Dimp2021WhereUniqueInput
  }

  /**
   * Dimp2021 findUniqueOrThrow
   */
  export type Dimp2021FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter, which Dimp2021 to fetch.
     */
    where: Dimp2021WhereUniqueInput
  }

  /**
   * Dimp2021 findFirst
   */
  export type Dimp2021FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter, which Dimp2021 to fetch.
     */
    where?: Dimp2021WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2021s to fetch.
     */
    orderBy?: Dimp2021OrderByWithRelationInput | Dimp2021OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2021s.
     */
    cursor?: Dimp2021WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2021s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2021s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2021s.
     */
    distinct?: Dimp2021ScalarFieldEnum | Dimp2021ScalarFieldEnum[]
  }

  /**
   * Dimp2021 findFirstOrThrow
   */
  export type Dimp2021FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter, which Dimp2021 to fetch.
     */
    where?: Dimp2021WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2021s to fetch.
     */
    orderBy?: Dimp2021OrderByWithRelationInput | Dimp2021OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2021s.
     */
    cursor?: Dimp2021WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2021s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2021s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2021s.
     */
    distinct?: Dimp2021ScalarFieldEnum | Dimp2021ScalarFieldEnum[]
  }

  /**
   * Dimp2021 findMany
   */
  export type Dimp2021FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter, which Dimp2021s to fetch.
     */
    where?: Dimp2021WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2021s to fetch.
     */
    orderBy?: Dimp2021OrderByWithRelationInput | Dimp2021OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimp2021s.
     */
    cursor?: Dimp2021WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2021s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2021s.
     */
    skip?: number
    distinct?: Dimp2021ScalarFieldEnum | Dimp2021ScalarFieldEnum[]
  }

  /**
   * Dimp2021 create
   */
  export type Dimp2021CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * The data needed to create a Dimp2021.
     */
    data: XOR<Dimp2021CreateInput, Dimp2021UncheckedCreateInput>
  }

  /**
   * Dimp2021 createMany
   */
  export type Dimp2021CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimp2021s.
     */
    data: Dimp2021CreateManyInput | Dimp2021CreateManyInput[]
  }

  /**
   * Dimp2021 update
   */
  export type Dimp2021UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * The data needed to update a Dimp2021.
     */
    data: XOR<Dimp2021UpdateInput, Dimp2021UncheckedUpdateInput>
    /**
     * Choose, which Dimp2021 to update.
     */
    where: Dimp2021WhereUniqueInput
  }

  /**
   * Dimp2021 updateMany
   */
  export type Dimp2021UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimp2021s.
     */
    data: XOR<Dimp2021UpdateManyMutationInput, Dimp2021UncheckedUpdateManyInput>
    /**
     * Filter which Dimp2021s to update
     */
    where?: Dimp2021WhereInput
  }

  /**
   * Dimp2021 upsert
   */
  export type Dimp2021UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * The filter to search for the Dimp2021 to update in case it exists.
     */
    where: Dimp2021WhereUniqueInput
    /**
     * In case the Dimp2021 found by the `where` argument doesn't exist, create a new Dimp2021 with this data.
     */
    create: XOR<Dimp2021CreateInput, Dimp2021UncheckedCreateInput>
    /**
     * In case the Dimp2021 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Dimp2021UpdateInput, Dimp2021UncheckedUpdateInput>
  }

  /**
   * Dimp2021 delete
   */
  export type Dimp2021DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
    /**
     * Filter which Dimp2021 to delete.
     */
    where: Dimp2021WhereUniqueInput
  }

  /**
   * Dimp2021 deleteMany
   */
  export type Dimp2021DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2021s to delete
     */
    where?: Dimp2021WhereInput
  }

  /**
   * Dimp2021 findRaw
   */
  export type Dimp2021FindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2021 aggregateRaw
   */
  export type Dimp2021AggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2021 without action
   */
  export type Dimp2021DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2021
     */
    select?: Dimp2021Select<ExtArgs> | null
  }


  /**
   * Model Dimp2022
   */

  export type AggregateDimp2022 = {
    _count: Dimp2022CountAggregateOutputType | null
    _avg: Dimp2022AvgAggregateOutputType | null
    _sum: Dimp2022SumAggregateOutputType | null
    _min: Dimp2022MinAggregateOutputType | null
    _max: Dimp2022MaxAggregateOutputType | null
  }

  export type Dimp2022AvgAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2022SumAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2022MinAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2022MaxAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2022CountAggregateOutputType = {
    id: number
    cnpjDeclarante: number
    nomeDeclarante: number
    competenciaDeclaracao: number
    cnpjCpfCliente: number
    nomeFantasiaCliente: number
    codigoMunicipioCliente: number
    nomeResponsavelCliente: number
    cnpjAdquirente: number
    dataOperacao: number
    operacaoSplit: number
    bandeiraCartao: number
    horaTransacao: number
    valorOperacao: number
    meioPagamento: number
    codTrans: number
    arquivoReferencia: number
    ano: number
    _all: number
  }


  export type Dimp2022AvgAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2022SumAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2022MinAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2022MaxAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2022CountAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
    _all?: true
  }

  export type Dimp2022AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2022 to aggregate.
     */
    where?: Dimp2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2022s to fetch.
     */
    orderBy?: Dimp2022OrderByWithRelationInput | Dimp2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Dimp2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimp2022s
    **/
    _count?: true | Dimp2022CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dimp2022AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dimp2022SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dimp2022MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dimp2022MaxAggregateInputType
  }

  export type GetDimp2022AggregateType<T extends Dimp2022AggregateArgs> = {
        [P in keyof T & keyof AggregateDimp2022]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimp2022[P]>
      : GetScalarType<T[P], AggregateDimp2022[P]>
  }




  export type Dimp2022GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Dimp2022WhereInput
    orderBy?: Dimp2022OrderByWithAggregationInput | Dimp2022OrderByWithAggregationInput[]
    by: Dimp2022ScalarFieldEnum[] | Dimp2022ScalarFieldEnum
    having?: Dimp2022ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dimp2022CountAggregateInputType | true
    _avg?: Dimp2022AvgAggregateInputType
    _sum?: Dimp2022SumAggregateInputType
    _min?: Dimp2022MinAggregateInputType
    _max?: Dimp2022MaxAggregateInputType
  }

  export type Dimp2022GroupByOutputType = {
    id: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia: string | null
    ano: string
    _count: Dimp2022CountAggregateOutputType | null
    _avg: Dimp2022AvgAggregateOutputType | null
    _sum: Dimp2022SumAggregateOutputType | null
    _min: Dimp2022MinAggregateOutputType | null
    _max: Dimp2022MaxAggregateOutputType | null
  }

  type GetDimp2022GroupByPayload<T extends Dimp2022GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dimp2022GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dimp2022GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dimp2022GroupByOutputType[P]>
            : GetScalarType<T[P], Dimp2022GroupByOutputType[P]>
        }
      >
    >


  export type Dimp2022Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }, ExtArgs["result"]["dimp2022"]>

  export type Dimp2022SelectScalar = {
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }



  export type $Dimp2022Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimp2022"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpjDeclarante: string
      nomeDeclarante: string
      competenciaDeclaracao: string
      cnpjCpfCliente: string
      nomeFantasiaCliente: string
      codigoMunicipioCliente: string
      nomeResponsavelCliente: string | null
      cnpjAdquirente: string | null
      dataOperacao: string
      operacaoSplit: string
      bandeiraCartao: string | null
      horaTransacao: string
      valorOperacao: number
      meioPagamento: string
      codTrans: string
      arquivoReferencia: string | null
      ano: string
    }, ExtArgs["result"]["dimp2022"]>
    composites: {}
  }


  type Dimp2022GetPayload<S extends boolean | null | undefined | Dimp2022DefaultArgs> = $Result.GetResult<Prisma.$Dimp2022Payload, S>

  type Dimp2022CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Dimp2022FindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Dimp2022CountAggregateInputType | true
    }

  export interface Dimp2022Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimp2022'], meta: { name: 'Dimp2022' } }
    /**
     * Find zero or one Dimp2022 that matches the filter.
     * @param {Dimp2022FindUniqueArgs} args - Arguments to find a Dimp2022
     * @example
     * // Get one Dimp2022
     * const dimp2022 = await prisma.dimp2022.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Dimp2022FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022FindUniqueArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimp2022 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Dimp2022FindUniqueOrThrowArgs} args - Arguments to find a Dimp2022
     * @example
     * // Get one Dimp2022
     * const dimp2022 = await prisma.dimp2022.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Dimp2022FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimp2022 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022FindFirstArgs} args - Arguments to find a Dimp2022
     * @example
     * // Get one Dimp2022
     * const dimp2022 = await prisma.dimp2022.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Dimp2022FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022FindFirstArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimp2022 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022FindFirstOrThrowArgs} args - Arguments to find a Dimp2022
     * @example
     * // Get one Dimp2022
     * const dimp2022 = await prisma.dimp2022.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Dimp2022FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2022s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimp2022s
     * const dimp2022s = await prisma.dimp2022.findMany()
     * 
     * // Get first 10 Dimp2022s
     * const dimp2022s = await prisma.dimp2022.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimp2022WithIdOnly = await prisma.dimp2022.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Dimp2022FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimp2022.
     * @param {Dimp2022CreateArgs} args - Arguments to create a Dimp2022.
     * @example
     * // Create one Dimp2022
     * const Dimp2022 = await prisma.dimp2022.create({
     *   data: {
     *     // ... data to create a Dimp2022
     *   }
     * })
     * 
    **/
    create<T extends Dimp2022CreateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022CreateArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimp2022s.
     *     @param {Dimp2022CreateManyArgs} args - Arguments to create many Dimp2022s.
     *     @example
     *     // Create many Dimp2022s
     *     const dimp2022 = await prisma.dimp2022.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Dimp2022CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimp2022.
     * @param {Dimp2022DeleteArgs} args - Arguments to delete one Dimp2022.
     * @example
     * // Delete one Dimp2022
     * const Dimp2022 = await prisma.dimp2022.delete({
     *   where: {
     *     // ... filter to delete one Dimp2022
     *   }
     * })
     * 
    **/
    delete<T extends Dimp2022DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022DeleteArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimp2022.
     * @param {Dimp2022UpdateArgs} args - Arguments to update one Dimp2022.
     * @example
     * // Update one Dimp2022
     * const dimp2022 = await prisma.dimp2022.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Dimp2022UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022UpdateArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimp2022s.
     * @param {Dimp2022DeleteManyArgs} args - Arguments to filter Dimp2022s to delete.
     * @example
     * // Delete a few Dimp2022s
     * const { count } = await prisma.dimp2022.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Dimp2022DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2022DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimp2022s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimp2022s
     * const dimp2022 = await prisma.dimp2022.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Dimp2022UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimp2022.
     * @param {Dimp2022UpsertArgs} args - Arguments to update or create a Dimp2022.
     * @example
     * // Update or create a Dimp2022
     * const dimp2022 = await prisma.dimp2022.upsert({
     *   create: {
     *     // ... data to create a Dimp2022
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimp2022 we want to update
     *   }
     * })
    **/
    upsert<T extends Dimp2022UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2022UpsertArgs<ExtArgs>>
    ): Prisma__Dimp2022Client<$Result.GetResult<Prisma.$Dimp2022Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2022s that matches the filter.
     * @param {Dimp2022FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dimp2022 = await prisma.dimp2022.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Dimp2022FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dimp2022.
     * @param {Dimp2022AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dimp2022 = await prisma.dimp2022.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Dimp2022AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Dimp2022s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022CountArgs} args - Arguments to filter Dimp2022s to count.
     * @example
     * // Count the number of Dimp2022s
     * const count = await prisma.dimp2022.count({
     *   where: {
     *     // ... the filter for the Dimp2022s we want to count
     *   }
     * })
    **/
    count<T extends Dimp2022CountArgs>(
      args?: Subset<T, Dimp2022CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dimp2022CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimp2022.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dimp2022AggregateArgs>(args: Subset<T, Dimp2022AggregateArgs>): Prisma.PrismaPromise<GetDimp2022AggregateType<T>>

    /**
     * Group by Dimp2022.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2022GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dimp2022GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dimp2022GroupByArgs['orderBy'] }
        : { orderBy?: Dimp2022GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dimp2022GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimp2022GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimp2022 model
   */
  readonly fields: Dimp2022FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimp2022.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Dimp2022Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimp2022 model
   */ 
  interface Dimp2022FieldRefs {
    readonly id: FieldRef<"Dimp2022", 'String'>
    readonly cnpjDeclarante: FieldRef<"Dimp2022", 'String'>
    readonly nomeDeclarante: FieldRef<"Dimp2022", 'String'>
    readonly competenciaDeclaracao: FieldRef<"Dimp2022", 'String'>
    readonly cnpjCpfCliente: FieldRef<"Dimp2022", 'String'>
    readonly nomeFantasiaCliente: FieldRef<"Dimp2022", 'String'>
    readonly codigoMunicipioCliente: FieldRef<"Dimp2022", 'String'>
    readonly nomeResponsavelCliente: FieldRef<"Dimp2022", 'String'>
    readonly cnpjAdquirente: FieldRef<"Dimp2022", 'String'>
    readonly dataOperacao: FieldRef<"Dimp2022", 'String'>
    readonly operacaoSplit: FieldRef<"Dimp2022", 'String'>
    readonly bandeiraCartao: FieldRef<"Dimp2022", 'String'>
    readonly horaTransacao: FieldRef<"Dimp2022", 'String'>
    readonly valorOperacao: FieldRef<"Dimp2022", 'Float'>
    readonly meioPagamento: FieldRef<"Dimp2022", 'String'>
    readonly codTrans: FieldRef<"Dimp2022", 'String'>
    readonly arquivoReferencia: FieldRef<"Dimp2022", 'String'>
    readonly ano: FieldRef<"Dimp2022", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dimp2022 findUnique
   */
  export type Dimp2022FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter, which Dimp2022 to fetch.
     */
    where: Dimp2022WhereUniqueInput
  }

  /**
   * Dimp2022 findUniqueOrThrow
   */
  export type Dimp2022FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter, which Dimp2022 to fetch.
     */
    where: Dimp2022WhereUniqueInput
  }

  /**
   * Dimp2022 findFirst
   */
  export type Dimp2022FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter, which Dimp2022 to fetch.
     */
    where?: Dimp2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2022s to fetch.
     */
    orderBy?: Dimp2022OrderByWithRelationInput | Dimp2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2022s.
     */
    cursor?: Dimp2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2022s.
     */
    distinct?: Dimp2022ScalarFieldEnum | Dimp2022ScalarFieldEnum[]
  }

  /**
   * Dimp2022 findFirstOrThrow
   */
  export type Dimp2022FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter, which Dimp2022 to fetch.
     */
    where?: Dimp2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2022s to fetch.
     */
    orderBy?: Dimp2022OrderByWithRelationInput | Dimp2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2022s.
     */
    cursor?: Dimp2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2022s.
     */
    distinct?: Dimp2022ScalarFieldEnum | Dimp2022ScalarFieldEnum[]
  }

  /**
   * Dimp2022 findMany
   */
  export type Dimp2022FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter, which Dimp2022s to fetch.
     */
    where?: Dimp2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2022s to fetch.
     */
    orderBy?: Dimp2022OrderByWithRelationInput | Dimp2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimp2022s.
     */
    cursor?: Dimp2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2022s.
     */
    skip?: number
    distinct?: Dimp2022ScalarFieldEnum | Dimp2022ScalarFieldEnum[]
  }

  /**
   * Dimp2022 create
   */
  export type Dimp2022CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * The data needed to create a Dimp2022.
     */
    data: XOR<Dimp2022CreateInput, Dimp2022UncheckedCreateInput>
  }

  /**
   * Dimp2022 createMany
   */
  export type Dimp2022CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimp2022s.
     */
    data: Dimp2022CreateManyInput | Dimp2022CreateManyInput[]
  }

  /**
   * Dimp2022 update
   */
  export type Dimp2022UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * The data needed to update a Dimp2022.
     */
    data: XOR<Dimp2022UpdateInput, Dimp2022UncheckedUpdateInput>
    /**
     * Choose, which Dimp2022 to update.
     */
    where: Dimp2022WhereUniqueInput
  }

  /**
   * Dimp2022 updateMany
   */
  export type Dimp2022UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimp2022s.
     */
    data: XOR<Dimp2022UpdateManyMutationInput, Dimp2022UncheckedUpdateManyInput>
    /**
     * Filter which Dimp2022s to update
     */
    where?: Dimp2022WhereInput
  }

  /**
   * Dimp2022 upsert
   */
  export type Dimp2022UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * The filter to search for the Dimp2022 to update in case it exists.
     */
    where: Dimp2022WhereUniqueInput
    /**
     * In case the Dimp2022 found by the `where` argument doesn't exist, create a new Dimp2022 with this data.
     */
    create: XOR<Dimp2022CreateInput, Dimp2022UncheckedCreateInput>
    /**
     * In case the Dimp2022 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Dimp2022UpdateInput, Dimp2022UncheckedUpdateInput>
  }

  /**
   * Dimp2022 delete
   */
  export type Dimp2022DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
    /**
     * Filter which Dimp2022 to delete.
     */
    where: Dimp2022WhereUniqueInput
  }

  /**
   * Dimp2022 deleteMany
   */
  export type Dimp2022DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2022s to delete
     */
    where?: Dimp2022WhereInput
  }

  /**
   * Dimp2022 findRaw
   */
  export type Dimp2022FindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2022 aggregateRaw
   */
  export type Dimp2022AggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2022 without action
   */
  export type Dimp2022DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2022
     */
    select?: Dimp2022Select<ExtArgs> | null
  }


  /**
   * Model Dimp2023
   */

  export type AggregateDimp2023 = {
    _count: Dimp2023CountAggregateOutputType | null
    _avg: Dimp2023AvgAggregateOutputType | null
    _sum: Dimp2023SumAggregateOutputType | null
    _min: Dimp2023MinAggregateOutputType | null
    _max: Dimp2023MaxAggregateOutputType | null
  }

  export type Dimp2023AvgAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2023SumAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2023MinAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2023MaxAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2023CountAggregateOutputType = {
    id: number
    cnpjDeclarante: number
    nomeDeclarante: number
    competenciaDeclaracao: number
    cnpjCpfCliente: number
    nomeFantasiaCliente: number
    codigoMunicipioCliente: number
    nomeResponsavelCliente: number
    cnpjAdquirente: number
    dataOperacao: number
    operacaoSplit: number
    bandeiraCartao: number
    horaTransacao: number
    valorOperacao: number
    meioPagamento: number
    codTrans: number
    arquivoReferencia: number
    ano: number
    _all: number
  }


  export type Dimp2023AvgAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2023SumAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2023MinAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2023MaxAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2023CountAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
    _all?: true
  }

  export type Dimp2023AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2023 to aggregate.
     */
    where?: Dimp2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2023s to fetch.
     */
    orderBy?: Dimp2023OrderByWithRelationInput | Dimp2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Dimp2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimp2023s
    **/
    _count?: true | Dimp2023CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dimp2023AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dimp2023SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dimp2023MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dimp2023MaxAggregateInputType
  }

  export type GetDimp2023AggregateType<T extends Dimp2023AggregateArgs> = {
        [P in keyof T & keyof AggregateDimp2023]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimp2023[P]>
      : GetScalarType<T[P], AggregateDimp2023[P]>
  }




  export type Dimp2023GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Dimp2023WhereInput
    orderBy?: Dimp2023OrderByWithAggregationInput | Dimp2023OrderByWithAggregationInput[]
    by: Dimp2023ScalarFieldEnum[] | Dimp2023ScalarFieldEnum
    having?: Dimp2023ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dimp2023CountAggregateInputType | true
    _avg?: Dimp2023AvgAggregateInputType
    _sum?: Dimp2023SumAggregateInputType
    _min?: Dimp2023MinAggregateInputType
    _max?: Dimp2023MaxAggregateInputType
  }

  export type Dimp2023GroupByOutputType = {
    id: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia: string | null
    ano: string
    _count: Dimp2023CountAggregateOutputType | null
    _avg: Dimp2023AvgAggregateOutputType | null
    _sum: Dimp2023SumAggregateOutputType | null
    _min: Dimp2023MinAggregateOutputType | null
    _max: Dimp2023MaxAggregateOutputType | null
  }

  type GetDimp2023GroupByPayload<T extends Dimp2023GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dimp2023GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dimp2023GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dimp2023GroupByOutputType[P]>
            : GetScalarType<T[P], Dimp2023GroupByOutputType[P]>
        }
      >
    >


  export type Dimp2023Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }, ExtArgs["result"]["dimp2023"]>

  export type Dimp2023SelectScalar = {
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }



  export type $Dimp2023Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimp2023"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpjDeclarante: string
      nomeDeclarante: string
      competenciaDeclaracao: string
      cnpjCpfCliente: string
      nomeFantasiaCliente: string
      codigoMunicipioCliente: string
      nomeResponsavelCliente: string | null
      cnpjAdquirente: string | null
      dataOperacao: string
      operacaoSplit: string
      bandeiraCartao: string | null
      horaTransacao: string
      valorOperacao: number
      meioPagamento: string
      codTrans: string
      arquivoReferencia: string | null
      ano: string
    }, ExtArgs["result"]["dimp2023"]>
    composites: {}
  }


  type Dimp2023GetPayload<S extends boolean | null | undefined | Dimp2023DefaultArgs> = $Result.GetResult<Prisma.$Dimp2023Payload, S>

  type Dimp2023CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Dimp2023FindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Dimp2023CountAggregateInputType | true
    }

  export interface Dimp2023Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimp2023'], meta: { name: 'Dimp2023' } }
    /**
     * Find zero or one Dimp2023 that matches the filter.
     * @param {Dimp2023FindUniqueArgs} args - Arguments to find a Dimp2023
     * @example
     * // Get one Dimp2023
     * const dimp2023 = await prisma.dimp2023.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Dimp2023FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023FindUniqueArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimp2023 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Dimp2023FindUniqueOrThrowArgs} args - Arguments to find a Dimp2023
     * @example
     * // Get one Dimp2023
     * const dimp2023 = await prisma.dimp2023.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Dimp2023FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimp2023 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023FindFirstArgs} args - Arguments to find a Dimp2023
     * @example
     * // Get one Dimp2023
     * const dimp2023 = await prisma.dimp2023.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Dimp2023FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023FindFirstArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimp2023 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023FindFirstOrThrowArgs} args - Arguments to find a Dimp2023
     * @example
     * // Get one Dimp2023
     * const dimp2023 = await prisma.dimp2023.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Dimp2023FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2023s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimp2023s
     * const dimp2023s = await prisma.dimp2023.findMany()
     * 
     * // Get first 10 Dimp2023s
     * const dimp2023s = await prisma.dimp2023.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimp2023WithIdOnly = await prisma.dimp2023.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Dimp2023FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimp2023.
     * @param {Dimp2023CreateArgs} args - Arguments to create a Dimp2023.
     * @example
     * // Create one Dimp2023
     * const Dimp2023 = await prisma.dimp2023.create({
     *   data: {
     *     // ... data to create a Dimp2023
     *   }
     * })
     * 
    **/
    create<T extends Dimp2023CreateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023CreateArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimp2023s.
     *     @param {Dimp2023CreateManyArgs} args - Arguments to create many Dimp2023s.
     *     @example
     *     // Create many Dimp2023s
     *     const dimp2023 = await prisma.dimp2023.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Dimp2023CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimp2023.
     * @param {Dimp2023DeleteArgs} args - Arguments to delete one Dimp2023.
     * @example
     * // Delete one Dimp2023
     * const Dimp2023 = await prisma.dimp2023.delete({
     *   where: {
     *     // ... filter to delete one Dimp2023
     *   }
     * })
     * 
    **/
    delete<T extends Dimp2023DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023DeleteArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimp2023.
     * @param {Dimp2023UpdateArgs} args - Arguments to update one Dimp2023.
     * @example
     * // Update one Dimp2023
     * const dimp2023 = await prisma.dimp2023.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Dimp2023UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023UpdateArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimp2023s.
     * @param {Dimp2023DeleteManyArgs} args - Arguments to filter Dimp2023s to delete.
     * @example
     * // Delete a few Dimp2023s
     * const { count } = await prisma.dimp2023.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Dimp2023DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2023DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimp2023s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimp2023s
     * const dimp2023 = await prisma.dimp2023.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Dimp2023UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimp2023.
     * @param {Dimp2023UpsertArgs} args - Arguments to update or create a Dimp2023.
     * @example
     * // Update or create a Dimp2023
     * const dimp2023 = await prisma.dimp2023.upsert({
     *   create: {
     *     // ... data to create a Dimp2023
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimp2023 we want to update
     *   }
     * })
    **/
    upsert<T extends Dimp2023UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2023UpsertArgs<ExtArgs>>
    ): Prisma__Dimp2023Client<$Result.GetResult<Prisma.$Dimp2023Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2023s that matches the filter.
     * @param {Dimp2023FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dimp2023 = await prisma.dimp2023.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Dimp2023FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dimp2023.
     * @param {Dimp2023AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dimp2023 = await prisma.dimp2023.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Dimp2023AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Dimp2023s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023CountArgs} args - Arguments to filter Dimp2023s to count.
     * @example
     * // Count the number of Dimp2023s
     * const count = await prisma.dimp2023.count({
     *   where: {
     *     // ... the filter for the Dimp2023s we want to count
     *   }
     * })
    **/
    count<T extends Dimp2023CountArgs>(
      args?: Subset<T, Dimp2023CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dimp2023CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimp2023.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dimp2023AggregateArgs>(args: Subset<T, Dimp2023AggregateArgs>): Prisma.PrismaPromise<GetDimp2023AggregateType<T>>

    /**
     * Group by Dimp2023.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2023GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dimp2023GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dimp2023GroupByArgs['orderBy'] }
        : { orderBy?: Dimp2023GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dimp2023GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimp2023GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimp2023 model
   */
  readonly fields: Dimp2023FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimp2023.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Dimp2023Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimp2023 model
   */ 
  interface Dimp2023FieldRefs {
    readonly id: FieldRef<"Dimp2023", 'String'>
    readonly cnpjDeclarante: FieldRef<"Dimp2023", 'String'>
    readonly nomeDeclarante: FieldRef<"Dimp2023", 'String'>
    readonly competenciaDeclaracao: FieldRef<"Dimp2023", 'String'>
    readonly cnpjCpfCliente: FieldRef<"Dimp2023", 'String'>
    readonly nomeFantasiaCliente: FieldRef<"Dimp2023", 'String'>
    readonly codigoMunicipioCliente: FieldRef<"Dimp2023", 'String'>
    readonly nomeResponsavelCliente: FieldRef<"Dimp2023", 'String'>
    readonly cnpjAdquirente: FieldRef<"Dimp2023", 'String'>
    readonly dataOperacao: FieldRef<"Dimp2023", 'String'>
    readonly operacaoSplit: FieldRef<"Dimp2023", 'String'>
    readonly bandeiraCartao: FieldRef<"Dimp2023", 'String'>
    readonly horaTransacao: FieldRef<"Dimp2023", 'String'>
    readonly valorOperacao: FieldRef<"Dimp2023", 'Float'>
    readonly meioPagamento: FieldRef<"Dimp2023", 'String'>
    readonly codTrans: FieldRef<"Dimp2023", 'String'>
    readonly arquivoReferencia: FieldRef<"Dimp2023", 'String'>
    readonly ano: FieldRef<"Dimp2023", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dimp2023 findUnique
   */
  export type Dimp2023FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter, which Dimp2023 to fetch.
     */
    where: Dimp2023WhereUniqueInput
  }

  /**
   * Dimp2023 findUniqueOrThrow
   */
  export type Dimp2023FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter, which Dimp2023 to fetch.
     */
    where: Dimp2023WhereUniqueInput
  }

  /**
   * Dimp2023 findFirst
   */
  export type Dimp2023FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter, which Dimp2023 to fetch.
     */
    where?: Dimp2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2023s to fetch.
     */
    orderBy?: Dimp2023OrderByWithRelationInput | Dimp2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2023s.
     */
    cursor?: Dimp2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2023s.
     */
    distinct?: Dimp2023ScalarFieldEnum | Dimp2023ScalarFieldEnum[]
  }

  /**
   * Dimp2023 findFirstOrThrow
   */
  export type Dimp2023FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter, which Dimp2023 to fetch.
     */
    where?: Dimp2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2023s to fetch.
     */
    orderBy?: Dimp2023OrderByWithRelationInput | Dimp2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2023s.
     */
    cursor?: Dimp2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2023s.
     */
    distinct?: Dimp2023ScalarFieldEnum | Dimp2023ScalarFieldEnum[]
  }

  /**
   * Dimp2023 findMany
   */
  export type Dimp2023FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter, which Dimp2023s to fetch.
     */
    where?: Dimp2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2023s to fetch.
     */
    orderBy?: Dimp2023OrderByWithRelationInput | Dimp2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimp2023s.
     */
    cursor?: Dimp2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2023s.
     */
    skip?: number
    distinct?: Dimp2023ScalarFieldEnum | Dimp2023ScalarFieldEnum[]
  }

  /**
   * Dimp2023 create
   */
  export type Dimp2023CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * The data needed to create a Dimp2023.
     */
    data: XOR<Dimp2023CreateInput, Dimp2023UncheckedCreateInput>
  }

  /**
   * Dimp2023 createMany
   */
  export type Dimp2023CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimp2023s.
     */
    data: Dimp2023CreateManyInput | Dimp2023CreateManyInput[]
  }

  /**
   * Dimp2023 update
   */
  export type Dimp2023UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * The data needed to update a Dimp2023.
     */
    data: XOR<Dimp2023UpdateInput, Dimp2023UncheckedUpdateInput>
    /**
     * Choose, which Dimp2023 to update.
     */
    where: Dimp2023WhereUniqueInput
  }

  /**
   * Dimp2023 updateMany
   */
  export type Dimp2023UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimp2023s.
     */
    data: XOR<Dimp2023UpdateManyMutationInput, Dimp2023UncheckedUpdateManyInput>
    /**
     * Filter which Dimp2023s to update
     */
    where?: Dimp2023WhereInput
  }

  /**
   * Dimp2023 upsert
   */
  export type Dimp2023UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * The filter to search for the Dimp2023 to update in case it exists.
     */
    where: Dimp2023WhereUniqueInput
    /**
     * In case the Dimp2023 found by the `where` argument doesn't exist, create a new Dimp2023 with this data.
     */
    create: XOR<Dimp2023CreateInput, Dimp2023UncheckedCreateInput>
    /**
     * In case the Dimp2023 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Dimp2023UpdateInput, Dimp2023UncheckedUpdateInput>
  }

  /**
   * Dimp2023 delete
   */
  export type Dimp2023DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
    /**
     * Filter which Dimp2023 to delete.
     */
    where: Dimp2023WhereUniqueInput
  }

  /**
   * Dimp2023 deleteMany
   */
  export type Dimp2023DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2023s to delete
     */
    where?: Dimp2023WhereInput
  }

  /**
   * Dimp2023 findRaw
   */
  export type Dimp2023FindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2023 aggregateRaw
   */
  export type Dimp2023AggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2023 without action
   */
  export type Dimp2023DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2023
     */
    select?: Dimp2023Select<ExtArgs> | null
  }


  /**
   * Model Dimp2024
   */

  export type AggregateDimp2024 = {
    _count: Dimp2024CountAggregateOutputType | null
    _avg: Dimp2024AvgAggregateOutputType | null
    _sum: Dimp2024SumAggregateOutputType | null
    _min: Dimp2024MinAggregateOutputType | null
    _max: Dimp2024MaxAggregateOutputType | null
  }

  export type Dimp2024AvgAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2024SumAggregateOutputType = {
    valorOperacao: number | null
  }

  export type Dimp2024MinAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2024MaxAggregateOutputType = {
    id: string | null
    cnpjDeclarante: string | null
    nomeDeclarante: string | null
    competenciaDeclaracao: string | null
    cnpjCpfCliente: string | null
    nomeFantasiaCliente: string | null
    codigoMunicipioCliente: string | null
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string | null
    operacaoSplit: string | null
    bandeiraCartao: string | null
    horaTransacao: string | null
    valorOperacao: number | null
    meioPagamento: string | null
    codTrans: string | null
    arquivoReferencia: string | null
    ano: string | null
  }

  export type Dimp2024CountAggregateOutputType = {
    id: number
    cnpjDeclarante: number
    nomeDeclarante: number
    competenciaDeclaracao: number
    cnpjCpfCliente: number
    nomeFantasiaCliente: number
    codigoMunicipioCliente: number
    nomeResponsavelCliente: number
    cnpjAdquirente: number
    dataOperacao: number
    operacaoSplit: number
    bandeiraCartao: number
    horaTransacao: number
    valorOperacao: number
    meioPagamento: number
    codTrans: number
    arquivoReferencia: number
    ano: number
    _all: number
  }


  export type Dimp2024AvgAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2024SumAggregateInputType = {
    valorOperacao?: true
  }

  export type Dimp2024MinAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2024MaxAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
  }

  export type Dimp2024CountAggregateInputType = {
    id?: true
    cnpjDeclarante?: true
    nomeDeclarante?: true
    competenciaDeclaracao?: true
    cnpjCpfCliente?: true
    nomeFantasiaCliente?: true
    codigoMunicipioCliente?: true
    nomeResponsavelCliente?: true
    cnpjAdquirente?: true
    dataOperacao?: true
    operacaoSplit?: true
    bandeiraCartao?: true
    horaTransacao?: true
    valorOperacao?: true
    meioPagamento?: true
    codTrans?: true
    arquivoReferencia?: true
    ano?: true
    _all?: true
  }

  export type Dimp2024AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2024 to aggregate.
     */
    where?: Dimp2024WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2024s to fetch.
     */
    orderBy?: Dimp2024OrderByWithRelationInput | Dimp2024OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Dimp2024WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2024s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2024s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dimp2024s
    **/
    _count?: true | Dimp2024CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dimp2024AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dimp2024SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dimp2024MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dimp2024MaxAggregateInputType
  }

  export type GetDimp2024AggregateType<T extends Dimp2024AggregateArgs> = {
        [P in keyof T & keyof AggregateDimp2024]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDimp2024[P]>
      : GetScalarType<T[P], AggregateDimp2024[P]>
  }




  export type Dimp2024GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Dimp2024WhereInput
    orderBy?: Dimp2024OrderByWithAggregationInput | Dimp2024OrderByWithAggregationInput[]
    by: Dimp2024ScalarFieldEnum[] | Dimp2024ScalarFieldEnum
    having?: Dimp2024ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dimp2024CountAggregateInputType | true
    _avg?: Dimp2024AvgAggregateInputType
    _sum?: Dimp2024SumAggregateInputType
    _min?: Dimp2024MinAggregateInputType
    _max?: Dimp2024MaxAggregateInputType
  }

  export type Dimp2024GroupByOutputType = {
    id: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente: string | null
    cnpjAdquirente: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia: string | null
    ano: string
    _count: Dimp2024CountAggregateOutputType | null
    _avg: Dimp2024AvgAggregateOutputType | null
    _sum: Dimp2024SumAggregateOutputType | null
    _min: Dimp2024MinAggregateOutputType | null
    _max: Dimp2024MaxAggregateOutputType | null
  }

  type GetDimp2024GroupByPayload<T extends Dimp2024GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dimp2024GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dimp2024GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dimp2024GroupByOutputType[P]>
            : GetScalarType<T[P], Dimp2024GroupByOutputType[P]>
        }
      >
    >


  export type Dimp2024Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }, ExtArgs["result"]["dimp2024"]>

  export type Dimp2024SelectScalar = {
    id?: boolean
    cnpjDeclarante?: boolean
    nomeDeclarante?: boolean
    competenciaDeclaracao?: boolean
    cnpjCpfCliente?: boolean
    nomeFantasiaCliente?: boolean
    codigoMunicipioCliente?: boolean
    nomeResponsavelCliente?: boolean
    cnpjAdquirente?: boolean
    dataOperacao?: boolean
    operacaoSplit?: boolean
    bandeiraCartao?: boolean
    horaTransacao?: boolean
    valorOperacao?: boolean
    meioPagamento?: boolean
    codTrans?: boolean
    arquivoReferencia?: boolean
    ano?: boolean
  }



  export type $Dimp2024Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dimp2024"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cnpjDeclarante: string
      nomeDeclarante: string
      competenciaDeclaracao: string
      cnpjCpfCliente: string
      nomeFantasiaCliente: string
      codigoMunicipioCliente: string
      nomeResponsavelCliente: string | null
      cnpjAdquirente: string | null
      dataOperacao: string
      operacaoSplit: string
      bandeiraCartao: string | null
      horaTransacao: string
      valorOperacao: number
      meioPagamento: string
      codTrans: string
      arquivoReferencia: string | null
      ano: string
    }, ExtArgs["result"]["dimp2024"]>
    composites: {}
  }


  type Dimp2024GetPayload<S extends boolean | null | undefined | Dimp2024DefaultArgs> = $Result.GetResult<Prisma.$Dimp2024Payload, S>

  type Dimp2024CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Dimp2024FindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Dimp2024CountAggregateInputType | true
    }

  export interface Dimp2024Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dimp2024'], meta: { name: 'Dimp2024' } }
    /**
     * Find zero or one Dimp2024 that matches the filter.
     * @param {Dimp2024FindUniqueArgs} args - Arguments to find a Dimp2024
     * @example
     * // Get one Dimp2024
     * const dimp2024 = await prisma.dimp2024.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Dimp2024FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024FindUniqueArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dimp2024 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Dimp2024FindUniqueOrThrowArgs} args - Arguments to find a Dimp2024
     * @example
     * // Get one Dimp2024
     * const dimp2024 = await prisma.dimp2024.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Dimp2024FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dimp2024 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024FindFirstArgs} args - Arguments to find a Dimp2024
     * @example
     * // Get one Dimp2024
     * const dimp2024 = await prisma.dimp2024.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Dimp2024FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024FindFirstArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dimp2024 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024FindFirstOrThrowArgs} args - Arguments to find a Dimp2024
     * @example
     * // Get one Dimp2024
     * const dimp2024 = await prisma.dimp2024.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Dimp2024FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2024s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dimp2024s
     * const dimp2024s = await prisma.dimp2024.findMany()
     * 
     * // Get first 10 Dimp2024s
     * const dimp2024s = await prisma.dimp2024.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dimp2024WithIdOnly = await prisma.dimp2024.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Dimp2024FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dimp2024.
     * @param {Dimp2024CreateArgs} args - Arguments to create a Dimp2024.
     * @example
     * // Create one Dimp2024
     * const Dimp2024 = await prisma.dimp2024.create({
     *   data: {
     *     // ... data to create a Dimp2024
     *   }
     * })
     * 
    **/
    create<T extends Dimp2024CreateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024CreateArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dimp2024s.
     *     @param {Dimp2024CreateManyArgs} args - Arguments to create many Dimp2024s.
     *     @example
     *     // Create many Dimp2024s
     *     const dimp2024 = await prisma.dimp2024.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Dimp2024CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dimp2024.
     * @param {Dimp2024DeleteArgs} args - Arguments to delete one Dimp2024.
     * @example
     * // Delete one Dimp2024
     * const Dimp2024 = await prisma.dimp2024.delete({
     *   where: {
     *     // ... filter to delete one Dimp2024
     *   }
     * })
     * 
    **/
    delete<T extends Dimp2024DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024DeleteArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dimp2024.
     * @param {Dimp2024UpdateArgs} args - Arguments to update one Dimp2024.
     * @example
     * // Update one Dimp2024
     * const dimp2024 = await prisma.dimp2024.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Dimp2024UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024UpdateArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dimp2024s.
     * @param {Dimp2024DeleteManyArgs} args - Arguments to filter Dimp2024s to delete.
     * @example
     * // Delete a few Dimp2024s
     * const { count } = await prisma.dimp2024.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Dimp2024DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Dimp2024DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dimp2024s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dimp2024s
     * const dimp2024 = await prisma.dimp2024.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Dimp2024UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dimp2024.
     * @param {Dimp2024UpsertArgs} args - Arguments to update or create a Dimp2024.
     * @example
     * // Update or create a Dimp2024
     * const dimp2024 = await prisma.dimp2024.upsert({
     *   create: {
     *     // ... data to create a Dimp2024
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dimp2024 we want to update
     *   }
     * })
    **/
    upsert<T extends Dimp2024UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Dimp2024UpsertArgs<ExtArgs>>
    ): Prisma__Dimp2024Client<$Result.GetResult<Prisma.$Dimp2024Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Dimp2024s that matches the filter.
     * @param {Dimp2024FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const dimp2024 = await prisma.dimp2024.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Dimp2024FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Dimp2024.
     * @param {Dimp2024AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const dimp2024 = await prisma.dimp2024.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Dimp2024AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Dimp2024s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024CountArgs} args - Arguments to filter Dimp2024s to count.
     * @example
     * // Count the number of Dimp2024s
     * const count = await prisma.dimp2024.count({
     *   where: {
     *     // ... the filter for the Dimp2024s we want to count
     *   }
     * })
    **/
    count<T extends Dimp2024CountArgs>(
      args?: Subset<T, Dimp2024CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dimp2024CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dimp2024.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dimp2024AggregateArgs>(args: Subset<T, Dimp2024AggregateArgs>): Prisma.PrismaPromise<GetDimp2024AggregateType<T>>

    /**
     * Group by Dimp2024.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dimp2024GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dimp2024GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dimp2024GroupByArgs['orderBy'] }
        : { orderBy?: Dimp2024GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dimp2024GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDimp2024GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dimp2024 model
   */
  readonly fields: Dimp2024FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dimp2024.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Dimp2024Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dimp2024 model
   */ 
  interface Dimp2024FieldRefs {
    readonly id: FieldRef<"Dimp2024", 'String'>
    readonly cnpjDeclarante: FieldRef<"Dimp2024", 'String'>
    readonly nomeDeclarante: FieldRef<"Dimp2024", 'String'>
    readonly competenciaDeclaracao: FieldRef<"Dimp2024", 'String'>
    readonly cnpjCpfCliente: FieldRef<"Dimp2024", 'String'>
    readonly nomeFantasiaCliente: FieldRef<"Dimp2024", 'String'>
    readonly codigoMunicipioCliente: FieldRef<"Dimp2024", 'String'>
    readonly nomeResponsavelCliente: FieldRef<"Dimp2024", 'String'>
    readonly cnpjAdquirente: FieldRef<"Dimp2024", 'String'>
    readonly dataOperacao: FieldRef<"Dimp2024", 'String'>
    readonly operacaoSplit: FieldRef<"Dimp2024", 'String'>
    readonly bandeiraCartao: FieldRef<"Dimp2024", 'String'>
    readonly horaTransacao: FieldRef<"Dimp2024", 'String'>
    readonly valorOperacao: FieldRef<"Dimp2024", 'Float'>
    readonly meioPagamento: FieldRef<"Dimp2024", 'String'>
    readonly codTrans: FieldRef<"Dimp2024", 'String'>
    readonly arquivoReferencia: FieldRef<"Dimp2024", 'String'>
    readonly ano: FieldRef<"Dimp2024", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dimp2024 findUnique
   */
  export type Dimp2024FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter, which Dimp2024 to fetch.
     */
    where: Dimp2024WhereUniqueInput
  }

  /**
   * Dimp2024 findUniqueOrThrow
   */
  export type Dimp2024FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter, which Dimp2024 to fetch.
     */
    where: Dimp2024WhereUniqueInput
  }

  /**
   * Dimp2024 findFirst
   */
  export type Dimp2024FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter, which Dimp2024 to fetch.
     */
    where?: Dimp2024WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2024s to fetch.
     */
    orderBy?: Dimp2024OrderByWithRelationInput | Dimp2024OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2024s.
     */
    cursor?: Dimp2024WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2024s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2024s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2024s.
     */
    distinct?: Dimp2024ScalarFieldEnum | Dimp2024ScalarFieldEnum[]
  }

  /**
   * Dimp2024 findFirstOrThrow
   */
  export type Dimp2024FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter, which Dimp2024 to fetch.
     */
    where?: Dimp2024WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2024s to fetch.
     */
    orderBy?: Dimp2024OrderByWithRelationInput | Dimp2024OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dimp2024s.
     */
    cursor?: Dimp2024WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2024s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2024s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dimp2024s.
     */
    distinct?: Dimp2024ScalarFieldEnum | Dimp2024ScalarFieldEnum[]
  }

  /**
   * Dimp2024 findMany
   */
  export type Dimp2024FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter, which Dimp2024s to fetch.
     */
    where?: Dimp2024WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dimp2024s to fetch.
     */
    orderBy?: Dimp2024OrderByWithRelationInput | Dimp2024OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dimp2024s.
     */
    cursor?: Dimp2024WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dimp2024s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dimp2024s.
     */
    skip?: number
    distinct?: Dimp2024ScalarFieldEnum | Dimp2024ScalarFieldEnum[]
  }

  /**
   * Dimp2024 create
   */
  export type Dimp2024CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * The data needed to create a Dimp2024.
     */
    data: XOR<Dimp2024CreateInput, Dimp2024UncheckedCreateInput>
  }

  /**
   * Dimp2024 createMany
   */
  export type Dimp2024CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dimp2024s.
     */
    data: Dimp2024CreateManyInput | Dimp2024CreateManyInput[]
  }

  /**
   * Dimp2024 update
   */
  export type Dimp2024UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * The data needed to update a Dimp2024.
     */
    data: XOR<Dimp2024UpdateInput, Dimp2024UncheckedUpdateInput>
    /**
     * Choose, which Dimp2024 to update.
     */
    where: Dimp2024WhereUniqueInput
  }

  /**
   * Dimp2024 updateMany
   */
  export type Dimp2024UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dimp2024s.
     */
    data: XOR<Dimp2024UpdateManyMutationInput, Dimp2024UncheckedUpdateManyInput>
    /**
     * Filter which Dimp2024s to update
     */
    where?: Dimp2024WhereInput
  }

  /**
   * Dimp2024 upsert
   */
  export type Dimp2024UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * The filter to search for the Dimp2024 to update in case it exists.
     */
    where: Dimp2024WhereUniqueInput
    /**
     * In case the Dimp2024 found by the `where` argument doesn't exist, create a new Dimp2024 with this data.
     */
    create: XOR<Dimp2024CreateInput, Dimp2024UncheckedCreateInput>
    /**
     * In case the Dimp2024 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Dimp2024UpdateInput, Dimp2024UncheckedUpdateInput>
  }

  /**
   * Dimp2024 delete
   */
  export type Dimp2024DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
    /**
     * Filter which Dimp2024 to delete.
     */
    where: Dimp2024WhereUniqueInput
  }

  /**
   * Dimp2024 deleteMany
   */
  export type Dimp2024DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dimp2024s to delete
     */
    where?: Dimp2024WhereInput
  }

  /**
   * Dimp2024 findRaw
   */
  export type Dimp2024FindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2024 aggregateRaw
   */
  export type Dimp2024AggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Dimp2024 without action
   */
  export type Dimp2024DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dimp2024
     */
    select?: Dimp2024Select<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    nome: string | null
    documento: string | null
    senha: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    documento: string | null
    senha: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nome: number
    documento: number
    senha: number
    email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    nome?: true
    documento?: true
    senha?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nome?: true
    documento?: true
    senha?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nome?: true
    documento?: true
    senha?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    nome: string
    documento: string
    senha: string
    email: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    documento?: boolean
    senha?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nome?: boolean
    documento?: boolean
    senha?: boolean
    email?: boolean
  }



  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      documento: string
      senha: string
      email: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly nome: FieldRef<"User", 'String'>
    readonly documento: FieldRef<"User", 'String'>
    readonly senha: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Competencia
   */

  export type AggregateCompetencia = {
    _count: CompetenciaCountAggregateOutputType | null
    _min: CompetenciaMinAggregateOutputType | null
    _max: CompetenciaMaxAggregateOutputType | null
  }

  export type CompetenciaMinAggregateOutputType = {
    id: string | null
    recebida: boolean | null
    competencia: string | null
  }

  export type CompetenciaMaxAggregateOutputType = {
    id: string | null
    recebida: boolean | null
    competencia: string | null
  }

  export type CompetenciaCountAggregateOutputType = {
    id: number
    recebida: number
    competencia: number
    _all: number
  }


  export type CompetenciaMinAggregateInputType = {
    id?: true
    recebida?: true
    competencia?: true
  }

  export type CompetenciaMaxAggregateInputType = {
    id?: true
    recebida?: true
    competencia?: true
  }

  export type CompetenciaCountAggregateInputType = {
    id?: true
    recebida?: true
    competencia?: true
    _all?: true
  }

  export type CompetenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competencia to aggregate.
     */
    where?: CompetenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competencias to fetch.
     */
    orderBy?: CompetenciaOrderByWithRelationInput | CompetenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competencias
    **/
    _count?: true | CompetenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenciaMaxAggregateInputType
  }

  export type GetCompetenciaAggregateType<T extends CompetenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetencia[P]>
      : GetScalarType<T[P], AggregateCompetencia[P]>
  }




  export type CompetenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenciaWhereInput
    orderBy?: CompetenciaOrderByWithAggregationInput | CompetenciaOrderByWithAggregationInput[]
    by: CompetenciaScalarFieldEnum[] | CompetenciaScalarFieldEnum
    having?: CompetenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenciaCountAggregateInputType | true
    _min?: CompetenciaMinAggregateInputType
    _max?: CompetenciaMaxAggregateInputType
  }

  export type CompetenciaGroupByOutputType = {
    id: string
    recebida: boolean
    competencia: string
    _count: CompetenciaCountAggregateOutputType | null
    _min: CompetenciaMinAggregateOutputType | null
    _max: CompetenciaMaxAggregateOutputType | null
  }

  type GetCompetenciaGroupByPayload<T extends CompetenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenciaGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenciaGroupByOutputType[P]>
        }
      >
    >


  export type CompetenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recebida?: boolean
    competencia?: boolean
  }, ExtArgs["result"]["competencia"]>

  export type CompetenciaSelectScalar = {
    id?: boolean
    recebida?: boolean
    competencia?: boolean
  }



  export type $CompetenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competencia"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recebida: boolean
      competencia: string
    }, ExtArgs["result"]["competencia"]>
    composites: {}
  }


  type CompetenciaGetPayload<S extends boolean | null | undefined | CompetenciaDefaultArgs> = $Result.GetResult<Prisma.$CompetenciaPayload, S>

  type CompetenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetenciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetenciaCountAggregateInputType | true
    }

  export interface CompetenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competencia'], meta: { name: 'Competencia' } }
    /**
     * Find zero or one Competencia that matches the filter.
     * @param {CompetenciaFindUniqueArgs} args - Arguments to find a Competencia
     * @example
     * // Get one Competencia
     * const competencia = await prisma.competencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompetenciaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaFindUniqueArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Competencia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompetenciaFindUniqueOrThrowArgs} args - Arguments to find a Competencia
     * @example
     * // Get one Competencia
     * const competencia = await prisma.competencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompetenciaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Competencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaFindFirstArgs} args - Arguments to find a Competencia
     * @example
     * // Get one Competencia
     * const competencia = await prisma.competencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompetenciaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaFindFirstArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Competencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaFindFirstOrThrowArgs} args - Arguments to find a Competencia
     * @example
     * // Get one Competencia
     * const competencia = await prisma.competencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompetenciaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Competencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competencias
     * const competencias = await prisma.competencia.findMany()
     * 
     * // Get first 10 Competencias
     * const competencias = await prisma.competencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenciaWithIdOnly = await prisma.competencia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompetenciaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Competencia.
     * @param {CompetenciaCreateArgs} args - Arguments to create a Competencia.
     * @example
     * // Create one Competencia
     * const Competencia = await prisma.competencia.create({
     *   data: {
     *     // ... data to create a Competencia
     *   }
     * })
     * 
    **/
    create<T extends CompetenciaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaCreateArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Competencias.
     *     @param {CompetenciaCreateManyArgs} args - Arguments to create many Competencias.
     *     @example
     *     // Create many Competencias
     *     const competencia = await prisma.competencia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompetenciaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Competencia.
     * @param {CompetenciaDeleteArgs} args - Arguments to delete one Competencia.
     * @example
     * // Delete one Competencia
     * const Competencia = await prisma.competencia.delete({
     *   where: {
     *     // ... filter to delete one Competencia
     *   }
     * })
     * 
    **/
    delete<T extends CompetenciaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaDeleteArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Competencia.
     * @param {CompetenciaUpdateArgs} args - Arguments to update one Competencia.
     * @example
     * // Update one Competencia
     * const competencia = await prisma.competencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompetenciaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaUpdateArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Competencias.
     * @param {CompetenciaDeleteManyArgs} args - Arguments to filter Competencias to delete.
     * @example
     * // Delete a few Competencias
     * const { count } = await prisma.competencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompetenciaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompetenciaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competencias
     * const competencia = await prisma.competencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompetenciaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competencia.
     * @param {CompetenciaUpsertArgs} args - Arguments to update or create a Competencia.
     * @example
     * // Update or create a Competencia
     * const competencia = await prisma.competencia.upsert({
     *   create: {
     *     // ... data to create a Competencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competencia we want to update
     *   }
     * })
    **/
    upsert<T extends CompetenciaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompetenciaUpsertArgs<ExtArgs>>
    ): Prisma__CompetenciaClient<$Result.GetResult<Prisma.$CompetenciaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Competencias that matches the filter.
     * @param {CompetenciaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const competencia = await prisma.competencia.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CompetenciaFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Competencia.
     * @param {CompetenciaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const competencia = await prisma.competencia.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CompetenciaAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Competencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaCountArgs} args - Arguments to filter Competencias to count.
     * @example
     * // Count the number of Competencias
     * const count = await prisma.competencia.count({
     *   where: {
     *     // ... the filter for the Competencias we want to count
     *   }
     * })
    **/
    count<T extends CompetenciaCountArgs>(
      args?: Subset<T, CompetenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenciaAggregateArgs>(args: Subset<T, CompetenciaAggregateArgs>): Prisma.PrismaPromise<GetCompetenciaAggregateType<T>>

    /**
     * Group by Competencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenciaGroupByArgs['orderBy'] }
        : { orderBy?: CompetenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competencia model
   */
  readonly fields: CompetenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Competencia model
   */ 
  interface CompetenciaFieldRefs {
    readonly id: FieldRef<"Competencia", 'String'>
    readonly recebida: FieldRef<"Competencia", 'Boolean'>
    readonly competencia: FieldRef<"Competencia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Competencia findUnique
   */
  export type CompetenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter, which Competencia to fetch.
     */
    where: CompetenciaWhereUniqueInput
  }

  /**
   * Competencia findUniqueOrThrow
   */
  export type CompetenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter, which Competencia to fetch.
     */
    where: CompetenciaWhereUniqueInput
  }

  /**
   * Competencia findFirst
   */
  export type CompetenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter, which Competencia to fetch.
     */
    where?: CompetenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competencias to fetch.
     */
    orderBy?: CompetenciaOrderByWithRelationInput | CompetenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competencias.
     */
    cursor?: CompetenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competencias.
     */
    distinct?: CompetenciaScalarFieldEnum | CompetenciaScalarFieldEnum[]
  }

  /**
   * Competencia findFirstOrThrow
   */
  export type CompetenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter, which Competencia to fetch.
     */
    where?: CompetenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competencias to fetch.
     */
    orderBy?: CompetenciaOrderByWithRelationInput | CompetenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competencias.
     */
    cursor?: CompetenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competencias.
     */
    distinct?: CompetenciaScalarFieldEnum | CompetenciaScalarFieldEnum[]
  }

  /**
   * Competencia findMany
   */
  export type CompetenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter, which Competencias to fetch.
     */
    where?: CompetenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competencias to fetch.
     */
    orderBy?: CompetenciaOrderByWithRelationInput | CompetenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competencias.
     */
    cursor?: CompetenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competencias.
     */
    skip?: number
    distinct?: CompetenciaScalarFieldEnum | CompetenciaScalarFieldEnum[]
  }

  /**
   * Competencia create
   */
  export type CompetenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * The data needed to create a Competencia.
     */
    data: XOR<CompetenciaCreateInput, CompetenciaUncheckedCreateInput>
  }

  /**
   * Competencia createMany
   */
  export type CompetenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competencias.
     */
    data: CompetenciaCreateManyInput | CompetenciaCreateManyInput[]
  }

  /**
   * Competencia update
   */
  export type CompetenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * The data needed to update a Competencia.
     */
    data: XOR<CompetenciaUpdateInput, CompetenciaUncheckedUpdateInput>
    /**
     * Choose, which Competencia to update.
     */
    where: CompetenciaWhereUniqueInput
  }

  /**
   * Competencia updateMany
   */
  export type CompetenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competencias.
     */
    data: XOR<CompetenciaUpdateManyMutationInput, CompetenciaUncheckedUpdateManyInput>
    /**
     * Filter which Competencias to update
     */
    where?: CompetenciaWhereInput
  }

  /**
   * Competencia upsert
   */
  export type CompetenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * The filter to search for the Competencia to update in case it exists.
     */
    where: CompetenciaWhereUniqueInput
    /**
     * In case the Competencia found by the `where` argument doesn't exist, create a new Competencia with this data.
     */
    create: XOR<CompetenciaCreateInput, CompetenciaUncheckedCreateInput>
    /**
     * In case the Competencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenciaUpdateInput, CompetenciaUncheckedUpdateInput>
  }

  /**
   * Competencia delete
   */
  export type CompetenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
    /**
     * Filter which Competencia to delete.
     */
    where: CompetenciaWhereUniqueInput
  }

  /**
   * Competencia deleteMany
   */
  export type CompetenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competencias to delete
     */
    where?: CompetenciaWhereInput
  }

  /**
   * Competencia findRaw
   */
  export type CompetenciaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Competencia aggregateRaw
   */
  export type CompetenciaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Competencia without action
   */
  export type CompetenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competencia
     */
    select?: CompetenciaSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const Dimp2020ScalarFieldEnum: {
    id: 'id',
    cnpjDeclarante: 'cnpjDeclarante',
    nomeDeclarante: 'nomeDeclarante',
    competenciaDeclaracao: 'competenciaDeclaracao',
    cnpjCpfCliente: 'cnpjCpfCliente',
    nomeFantasiaCliente: 'nomeFantasiaCliente',
    codigoMunicipioCliente: 'codigoMunicipioCliente',
    nomeResponsavelCliente: 'nomeResponsavelCliente',
    cnpjAdquirente: 'cnpjAdquirente',
    dataOperacao: 'dataOperacao',
    operacaoSplit: 'operacaoSplit',
    bandeiraCartao: 'bandeiraCartao',
    horaTransacao: 'horaTransacao',
    valorOperacao: 'valorOperacao',
    meioPagamento: 'meioPagamento',
    codTrans: 'codTrans',
    arquivoReferencia: 'arquivoReferencia',
    ano: 'ano'
  };

  export type Dimp2020ScalarFieldEnum = (typeof Dimp2020ScalarFieldEnum)[keyof typeof Dimp2020ScalarFieldEnum]


  export const Dimp2021ScalarFieldEnum: {
    id: 'id',
    cnpjDeclarante: 'cnpjDeclarante',
    nomeDeclarante: 'nomeDeclarante',
    competenciaDeclaracao: 'competenciaDeclaracao',
    cnpjCpfCliente: 'cnpjCpfCliente',
    nomeFantasiaCliente: 'nomeFantasiaCliente',
    codigoMunicipioCliente: 'codigoMunicipioCliente',
    nomeResponsavelCliente: 'nomeResponsavelCliente',
    cnpjAdquirente: 'cnpjAdquirente',
    dataOperacao: 'dataOperacao',
    operacaoSplit: 'operacaoSplit',
    bandeiraCartao: 'bandeiraCartao',
    horaTransacao: 'horaTransacao',
    valorOperacao: 'valorOperacao',
    meioPagamento: 'meioPagamento',
    codTrans: 'codTrans',
    arquivoReferencia: 'arquivoReferencia',
    ano: 'ano'
  };

  export type Dimp2021ScalarFieldEnum = (typeof Dimp2021ScalarFieldEnum)[keyof typeof Dimp2021ScalarFieldEnum]


  export const Dimp2022ScalarFieldEnum: {
    id: 'id',
    cnpjDeclarante: 'cnpjDeclarante',
    nomeDeclarante: 'nomeDeclarante',
    competenciaDeclaracao: 'competenciaDeclaracao',
    cnpjCpfCliente: 'cnpjCpfCliente',
    nomeFantasiaCliente: 'nomeFantasiaCliente',
    codigoMunicipioCliente: 'codigoMunicipioCliente',
    nomeResponsavelCliente: 'nomeResponsavelCliente',
    cnpjAdquirente: 'cnpjAdquirente',
    dataOperacao: 'dataOperacao',
    operacaoSplit: 'operacaoSplit',
    bandeiraCartao: 'bandeiraCartao',
    horaTransacao: 'horaTransacao',
    valorOperacao: 'valorOperacao',
    meioPagamento: 'meioPagamento',
    codTrans: 'codTrans',
    arquivoReferencia: 'arquivoReferencia',
    ano: 'ano'
  };

  export type Dimp2022ScalarFieldEnum = (typeof Dimp2022ScalarFieldEnum)[keyof typeof Dimp2022ScalarFieldEnum]


  export const Dimp2023ScalarFieldEnum: {
    id: 'id',
    cnpjDeclarante: 'cnpjDeclarante',
    nomeDeclarante: 'nomeDeclarante',
    competenciaDeclaracao: 'competenciaDeclaracao',
    cnpjCpfCliente: 'cnpjCpfCliente',
    nomeFantasiaCliente: 'nomeFantasiaCliente',
    codigoMunicipioCliente: 'codigoMunicipioCliente',
    nomeResponsavelCliente: 'nomeResponsavelCliente',
    cnpjAdquirente: 'cnpjAdquirente',
    dataOperacao: 'dataOperacao',
    operacaoSplit: 'operacaoSplit',
    bandeiraCartao: 'bandeiraCartao',
    horaTransacao: 'horaTransacao',
    valorOperacao: 'valorOperacao',
    meioPagamento: 'meioPagamento',
    codTrans: 'codTrans',
    arquivoReferencia: 'arquivoReferencia',
    ano: 'ano'
  };

  export type Dimp2023ScalarFieldEnum = (typeof Dimp2023ScalarFieldEnum)[keyof typeof Dimp2023ScalarFieldEnum]


  export const Dimp2024ScalarFieldEnum: {
    id: 'id',
    cnpjDeclarante: 'cnpjDeclarante',
    nomeDeclarante: 'nomeDeclarante',
    competenciaDeclaracao: 'competenciaDeclaracao',
    cnpjCpfCliente: 'cnpjCpfCliente',
    nomeFantasiaCliente: 'nomeFantasiaCliente',
    codigoMunicipioCliente: 'codigoMunicipioCliente',
    nomeResponsavelCliente: 'nomeResponsavelCliente',
    cnpjAdquirente: 'cnpjAdquirente',
    dataOperacao: 'dataOperacao',
    operacaoSplit: 'operacaoSplit',
    bandeiraCartao: 'bandeiraCartao',
    horaTransacao: 'horaTransacao',
    valorOperacao: 'valorOperacao',
    meioPagamento: 'meioPagamento',
    codTrans: 'codTrans',
    arquivoReferencia: 'arquivoReferencia',
    ano: 'ano'
  };

  export type Dimp2024ScalarFieldEnum = (typeof Dimp2024ScalarFieldEnum)[keyof typeof Dimp2024ScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    documento: 'documento',
    senha: 'senha',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompetenciaScalarFieldEnum: {
    id: 'id',
    recebida: 'recebida',
    competencia: 'competencia'
  };

  export type CompetenciaScalarFieldEnum = (typeof CompetenciaScalarFieldEnum)[keyof typeof CompetenciaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type Dimp2020WhereInput = {
    AND?: Dimp2020WhereInput | Dimp2020WhereInput[]
    OR?: Dimp2020WhereInput[]
    NOT?: Dimp2020WhereInput | Dimp2020WhereInput[]
    id?: StringFilter<"Dimp2020"> | string
    cnpjDeclarante?: StringFilter<"Dimp2020"> | string
    nomeDeclarante?: StringFilter<"Dimp2020"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2020"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2020"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2020"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2020"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2020"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2020"> | string | null
    dataOperacao?: StringFilter<"Dimp2020"> | string
    operacaoSplit?: StringFilter<"Dimp2020"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2020"> | string | null
    horaTransacao?: StringFilter<"Dimp2020"> | string
    valorOperacao?: FloatFilter<"Dimp2020"> | number
    meioPagamento?: StringFilter<"Dimp2020"> | string
    codTrans?: StringFilter<"Dimp2020"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2020"> | string | null
    ano?: StringFilter<"Dimp2020"> | string
  }

  export type Dimp2020OrderByWithRelationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2020WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Dimp2020WhereInput | Dimp2020WhereInput[]
    OR?: Dimp2020WhereInput[]
    NOT?: Dimp2020WhereInput | Dimp2020WhereInput[]
    cnpjDeclarante?: StringFilter<"Dimp2020"> | string
    nomeDeclarante?: StringFilter<"Dimp2020"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2020"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2020"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2020"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2020"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2020"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2020"> | string | null
    dataOperacao?: StringFilter<"Dimp2020"> | string
    operacaoSplit?: StringFilter<"Dimp2020"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2020"> | string | null
    horaTransacao?: StringFilter<"Dimp2020"> | string
    valorOperacao?: FloatFilter<"Dimp2020"> | number
    meioPagamento?: StringFilter<"Dimp2020"> | string
    codTrans?: StringFilter<"Dimp2020"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2020"> | string | null
    ano?: StringFilter<"Dimp2020"> | string
  }, "id">

  export type Dimp2020OrderByWithAggregationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
    _count?: Dimp2020CountOrderByAggregateInput
    _avg?: Dimp2020AvgOrderByAggregateInput
    _max?: Dimp2020MaxOrderByAggregateInput
    _min?: Dimp2020MinOrderByAggregateInput
    _sum?: Dimp2020SumOrderByAggregateInput
  }

  export type Dimp2020ScalarWhereWithAggregatesInput = {
    AND?: Dimp2020ScalarWhereWithAggregatesInput | Dimp2020ScalarWhereWithAggregatesInput[]
    OR?: Dimp2020ScalarWhereWithAggregatesInput[]
    NOT?: Dimp2020ScalarWhereWithAggregatesInput | Dimp2020ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dimp2020"> | string
    cnpjDeclarante?: StringWithAggregatesFilter<"Dimp2020"> | string
    nomeDeclarante?: StringWithAggregatesFilter<"Dimp2020"> | string
    competenciaDeclaracao?: StringWithAggregatesFilter<"Dimp2020"> | string
    cnpjCpfCliente?: StringWithAggregatesFilter<"Dimp2020"> | string
    nomeFantasiaCliente?: StringWithAggregatesFilter<"Dimp2020"> | string
    codigoMunicipioCliente?: StringWithAggregatesFilter<"Dimp2020"> | string
    nomeResponsavelCliente?: StringNullableWithAggregatesFilter<"Dimp2020"> | string | null
    cnpjAdquirente?: StringNullableWithAggregatesFilter<"Dimp2020"> | string | null
    dataOperacao?: StringWithAggregatesFilter<"Dimp2020"> | string
    operacaoSplit?: StringWithAggregatesFilter<"Dimp2020"> | string
    bandeiraCartao?: StringNullableWithAggregatesFilter<"Dimp2020"> | string | null
    horaTransacao?: StringWithAggregatesFilter<"Dimp2020"> | string
    valorOperacao?: FloatWithAggregatesFilter<"Dimp2020"> | number
    meioPagamento?: StringWithAggregatesFilter<"Dimp2020"> | string
    codTrans?: StringWithAggregatesFilter<"Dimp2020"> | string
    arquivoReferencia?: StringNullableWithAggregatesFilter<"Dimp2020"> | string | null
    ano?: StringWithAggregatesFilter<"Dimp2020"> | string
  }

  export type Dimp2021WhereInput = {
    AND?: Dimp2021WhereInput | Dimp2021WhereInput[]
    OR?: Dimp2021WhereInput[]
    NOT?: Dimp2021WhereInput | Dimp2021WhereInput[]
    id?: StringFilter<"Dimp2021"> | string
    cnpjDeclarante?: StringFilter<"Dimp2021"> | string
    nomeDeclarante?: StringFilter<"Dimp2021"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2021"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2021"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2021"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2021"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2021"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2021"> | string | null
    dataOperacao?: StringFilter<"Dimp2021"> | string
    operacaoSplit?: StringFilter<"Dimp2021"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2021"> | string | null
    horaTransacao?: StringFilter<"Dimp2021"> | string
    valorOperacao?: FloatFilter<"Dimp2021"> | number
    meioPagamento?: StringFilter<"Dimp2021"> | string
    codTrans?: StringFilter<"Dimp2021"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2021"> | string | null
    ano?: StringFilter<"Dimp2021"> | string
  }

  export type Dimp2021OrderByWithRelationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2021WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Dimp2021WhereInput | Dimp2021WhereInput[]
    OR?: Dimp2021WhereInput[]
    NOT?: Dimp2021WhereInput | Dimp2021WhereInput[]
    cnpjDeclarante?: StringFilter<"Dimp2021"> | string
    nomeDeclarante?: StringFilter<"Dimp2021"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2021"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2021"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2021"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2021"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2021"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2021"> | string | null
    dataOperacao?: StringFilter<"Dimp2021"> | string
    operacaoSplit?: StringFilter<"Dimp2021"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2021"> | string | null
    horaTransacao?: StringFilter<"Dimp2021"> | string
    valorOperacao?: FloatFilter<"Dimp2021"> | number
    meioPagamento?: StringFilter<"Dimp2021"> | string
    codTrans?: StringFilter<"Dimp2021"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2021"> | string | null
    ano?: StringFilter<"Dimp2021"> | string
  }, "id">

  export type Dimp2021OrderByWithAggregationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
    _count?: Dimp2021CountOrderByAggregateInput
    _avg?: Dimp2021AvgOrderByAggregateInput
    _max?: Dimp2021MaxOrderByAggregateInput
    _min?: Dimp2021MinOrderByAggregateInput
    _sum?: Dimp2021SumOrderByAggregateInput
  }

  export type Dimp2021ScalarWhereWithAggregatesInput = {
    AND?: Dimp2021ScalarWhereWithAggregatesInput | Dimp2021ScalarWhereWithAggregatesInput[]
    OR?: Dimp2021ScalarWhereWithAggregatesInput[]
    NOT?: Dimp2021ScalarWhereWithAggregatesInput | Dimp2021ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dimp2021"> | string
    cnpjDeclarante?: StringWithAggregatesFilter<"Dimp2021"> | string
    nomeDeclarante?: StringWithAggregatesFilter<"Dimp2021"> | string
    competenciaDeclaracao?: StringWithAggregatesFilter<"Dimp2021"> | string
    cnpjCpfCliente?: StringWithAggregatesFilter<"Dimp2021"> | string
    nomeFantasiaCliente?: StringWithAggregatesFilter<"Dimp2021"> | string
    codigoMunicipioCliente?: StringWithAggregatesFilter<"Dimp2021"> | string
    nomeResponsavelCliente?: StringNullableWithAggregatesFilter<"Dimp2021"> | string | null
    cnpjAdquirente?: StringNullableWithAggregatesFilter<"Dimp2021"> | string | null
    dataOperacao?: StringWithAggregatesFilter<"Dimp2021"> | string
    operacaoSplit?: StringWithAggregatesFilter<"Dimp2021"> | string
    bandeiraCartao?: StringNullableWithAggregatesFilter<"Dimp2021"> | string | null
    horaTransacao?: StringWithAggregatesFilter<"Dimp2021"> | string
    valorOperacao?: FloatWithAggregatesFilter<"Dimp2021"> | number
    meioPagamento?: StringWithAggregatesFilter<"Dimp2021"> | string
    codTrans?: StringWithAggregatesFilter<"Dimp2021"> | string
    arquivoReferencia?: StringNullableWithAggregatesFilter<"Dimp2021"> | string | null
    ano?: StringWithAggregatesFilter<"Dimp2021"> | string
  }

  export type Dimp2022WhereInput = {
    AND?: Dimp2022WhereInput | Dimp2022WhereInput[]
    OR?: Dimp2022WhereInput[]
    NOT?: Dimp2022WhereInput | Dimp2022WhereInput[]
    id?: StringFilter<"Dimp2022"> | string
    cnpjDeclarante?: StringFilter<"Dimp2022"> | string
    nomeDeclarante?: StringFilter<"Dimp2022"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2022"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2022"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2022"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2022"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2022"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2022"> | string | null
    dataOperacao?: StringFilter<"Dimp2022"> | string
    operacaoSplit?: StringFilter<"Dimp2022"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2022"> | string | null
    horaTransacao?: StringFilter<"Dimp2022"> | string
    valorOperacao?: FloatFilter<"Dimp2022"> | number
    meioPagamento?: StringFilter<"Dimp2022"> | string
    codTrans?: StringFilter<"Dimp2022"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2022"> | string | null
    ano?: StringFilter<"Dimp2022"> | string
  }

  export type Dimp2022OrderByWithRelationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2022WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Dimp2022WhereInput | Dimp2022WhereInput[]
    OR?: Dimp2022WhereInput[]
    NOT?: Dimp2022WhereInput | Dimp2022WhereInput[]
    cnpjDeclarante?: StringFilter<"Dimp2022"> | string
    nomeDeclarante?: StringFilter<"Dimp2022"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2022"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2022"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2022"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2022"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2022"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2022"> | string | null
    dataOperacao?: StringFilter<"Dimp2022"> | string
    operacaoSplit?: StringFilter<"Dimp2022"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2022"> | string | null
    horaTransacao?: StringFilter<"Dimp2022"> | string
    valorOperacao?: FloatFilter<"Dimp2022"> | number
    meioPagamento?: StringFilter<"Dimp2022"> | string
    codTrans?: StringFilter<"Dimp2022"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2022"> | string | null
    ano?: StringFilter<"Dimp2022"> | string
  }, "id">

  export type Dimp2022OrderByWithAggregationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
    _count?: Dimp2022CountOrderByAggregateInput
    _avg?: Dimp2022AvgOrderByAggregateInput
    _max?: Dimp2022MaxOrderByAggregateInput
    _min?: Dimp2022MinOrderByAggregateInput
    _sum?: Dimp2022SumOrderByAggregateInput
  }

  export type Dimp2022ScalarWhereWithAggregatesInput = {
    AND?: Dimp2022ScalarWhereWithAggregatesInput | Dimp2022ScalarWhereWithAggregatesInput[]
    OR?: Dimp2022ScalarWhereWithAggregatesInput[]
    NOT?: Dimp2022ScalarWhereWithAggregatesInput | Dimp2022ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dimp2022"> | string
    cnpjDeclarante?: StringWithAggregatesFilter<"Dimp2022"> | string
    nomeDeclarante?: StringWithAggregatesFilter<"Dimp2022"> | string
    competenciaDeclaracao?: StringWithAggregatesFilter<"Dimp2022"> | string
    cnpjCpfCliente?: StringWithAggregatesFilter<"Dimp2022"> | string
    nomeFantasiaCliente?: StringWithAggregatesFilter<"Dimp2022"> | string
    codigoMunicipioCliente?: StringWithAggregatesFilter<"Dimp2022"> | string
    nomeResponsavelCliente?: StringNullableWithAggregatesFilter<"Dimp2022"> | string | null
    cnpjAdquirente?: StringNullableWithAggregatesFilter<"Dimp2022"> | string | null
    dataOperacao?: StringWithAggregatesFilter<"Dimp2022"> | string
    operacaoSplit?: StringWithAggregatesFilter<"Dimp2022"> | string
    bandeiraCartao?: StringNullableWithAggregatesFilter<"Dimp2022"> | string | null
    horaTransacao?: StringWithAggregatesFilter<"Dimp2022"> | string
    valorOperacao?: FloatWithAggregatesFilter<"Dimp2022"> | number
    meioPagamento?: StringWithAggregatesFilter<"Dimp2022"> | string
    codTrans?: StringWithAggregatesFilter<"Dimp2022"> | string
    arquivoReferencia?: StringNullableWithAggregatesFilter<"Dimp2022"> | string | null
    ano?: StringWithAggregatesFilter<"Dimp2022"> | string
  }

  export type Dimp2023WhereInput = {
    AND?: Dimp2023WhereInput | Dimp2023WhereInput[]
    OR?: Dimp2023WhereInput[]
    NOT?: Dimp2023WhereInput | Dimp2023WhereInput[]
    id?: StringFilter<"Dimp2023"> | string
    cnpjDeclarante?: StringFilter<"Dimp2023"> | string
    nomeDeclarante?: StringFilter<"Dimp2023"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2023"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2023"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2023"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2023"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2023"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2023"> | string | null
    dataOperacao?: StringFilter<"Dimp2023"> | string
    operacaoSplit?: StringFilter<"Dimp2023"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2023"> | string | null
    horaTransacao?: StringFilter<"Dimp2023"> | string
    valorOperacao?: FloatFilter<"Dimp2023"> | number
    meioPagamento?: StringFilter<"Dimp2023"> | string
    codTrans?: StringFilter<"Dimp2023"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2023"> | string | null
    ano?: StringFilter<"Dimp2023"> | string
  }

  export type Dimp2023OrderByWithRelationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2023WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Dimp2023WhereInput | Dimp2023WhereInput[]
    OR?: Dimp2023WhereInput[]
    NOT?: Dimp2023WhereInput | Dimp2023WhereInput[]
    cnpjDeclarante?: StringFilter<"Dimp2023"> | string
    nomeDeclarante?: StringFilter<"Dimp2023"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2023"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2023"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2023"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2023"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2023"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2023"> | string | null
    dataOperacao?: StringFilter<"Dimp2023"> | string
    operacaoSplit?: StringFilter<"Dimp2023"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2023"> | string | null
    horaTransacao?: StringFilter<"Dimp2023"> | string
    valorOperacao?: FloatFilter<"Dimp2023"> | number
    meioPagamento?: StringFilter<"Dimp2023"> | string
    codTrans?: StringFilter<"Dimp2023"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2023"> | string | null
    ano?: StringFilter<"Dimp2023"> | string
  }, "id">

  export type Dimp2023OrderByWithAggregationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
    _count?: Dimp2023CountOrderByAggregateInput
    _avg?: Dimp2023AvgOrderByAggregateInput
    _max?: Dimp2023MaxOrderByAggregateInput
    _min?: Dimp2023MinOrderByAggregateInput
    _sum?: Dimp2023SumOrderByAggregateInput
  }

  export type Dimp2023ScalarWhereWithAggregatesInput = {
    AND?: Dimp2023ScalarWhereWithAggregatesInput | Dimp2023ScalarWhereWithAggregatesInput[]
    OR?: Dimp2023ScalarWhereWithAggregatesInput[]
    NOT?: Dimp2023ScalarWhereWithAggregatesInput | Dimp2023ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dimp2023"> | string
    cnpjDeclarante?: StringWithAggregatesFilter<"Dimp2023"> | string
    nomeDeclarante?: StringWithAggregatesFilter<"Dimp2023"> | string
    competenciaDeclaracao?: StringWithAggregatesFilter<"Dimp2023"> | string
    cnpjCpfCliente?: StringWithAggregatesFilter<"Dimp2023"> | string
    nomeFantasiaCliente?: StringWithAggregatesFilter<"Dimp2023"> | string
    codigoMunicipioCliente?: StringWithAggregatesFilter<"Dimp2023"> | string
    nomeResponsavelCliente?: StringNullableWithAggregatesFilter<"Dimp2023"> | string | null
    cnpjAdquirente?: StringNullableWithAggregatesFilter<"Dimp2023"> | string | null
    dataOperacao?: StringWithAggregatesFilter<"Dimp2023"> | string
    operacaoSplit?: StringWithAggregatesFilter<"Dimp2023"> | string
    bandeiraCartao?: StringNullableWithAggregatesFilter<"Dimp2023"> | string | null
    horaTransacao?: StringWithAggregatesFilter<"Dimp2023"> | string
    valorOperacao?: FloatWithAggregatesFilter<"Dimp2023"> | number
    meioPagamento?: StringWithAggregatesFilter<"Dimp2023"> | string
    codTrans?: StringWithAggregatesFilter<"Dimp2023"> | string
    arquivoReferencia?: StringNullableWithAggregatesFilter<"Dimp2023"> | string | null
    ano?: StringWithAggregatesFilter<"Dimp2023"> | string
  }

  export type Dimp2024WhereInput = {
    AND?: Dimp2024WhereInput | Dimp2024WhereInput[]
    OR?: Dimp2024WhereInput[]
    NOT?: Dimp2024WhereInput | Dimp2024WhereInput[]
    id?: StringFilter<"Dimp2024"> | string
    cnpjDeclarante?: StringFilter<"Dimp2024"> | string
    nomeDeclarante?: StringFilter<"Dimp2024"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2024"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2024"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2024"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2024"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2024"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2024"> | string | null
    dataOperacao?: StringFilter<"Dimp2024"> | string
    operacaoSplit?: StringFilter<"Dimp2024"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2024"> | string | null
    horaTransacao?: StringFilter<"Dimp2024"> | string
    valorOperacao?: FloatFilter<"Dimp2024"> | number
    meioPagamento?: StringFilter<"Dimp2024"> | string
    codTrans?: StringFilter<"Dimp2024"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2024"> | string | null
    ano?: StringFilter<"Dimp2024"> | string
  }

  export type Dimp2024OrderByWithRelationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2024WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Dimp2024WhereInput | Dimp2024WhereInput[]
    OR?: Dimp2024WhereInput[]
    NOT?: Dimp2024WhereInput | Dimp2024WhereInput[]
    cnpjDeclarante?: StringFilter<"Dimp2024"> | string
    nomeDeclarante?: StringFilter<"Dimp2024"> | string
    competenciaDeclaracao?: StringFilter<"Dimp2024"> | string
    cnpjCpfCliente?: StringFilter<"Dimp2024"> | string
    nomeFantasiaCliente?: StringFilter<"Dimp2024"> | string
    codigoMunicipioCliente?: StringFilter<"Dimp2024"> | string
    nomeResponsavelCliente?: StringNullableFilter<"Dimp2024"> | string | null
    cnpjAdquirente?: StringNullableFilter<"Dimp2024"> | string | null
    dataOperacao?: StringFilter<"Dimp2024"> | string
    operacaoSplit?: StringFilter<"Dimp2024"> | string
    bandeiraCartao?: StringNullableFilter<"Dimp2024"> | string | null
    horaTransacao?: StringFilter<"Dimp2024"> | string
    valorOperacao?: FloatFilter<"Dimp2024"> | number
    meioPagamento?: StringFilter<"Dimp2024"> | string
    codTrans?: StringFilter<"Dimp2024"> | string
    arquivoReferencia?: StringNullableFilter<"Dimp2024"> | string | null
    ano?: StringFilter<"Dimp2024"> | string
  }, "id">

  export type Dimp2024OrderByWithAggregationInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
    _count?: Dimp2024CountOrderByAggregateInput
    _avg?: Dimp2024AvgOrderByAggregateInput
    _max?: Dimp2024MaxOrderByAggregateInput
    _min?: Dimp2024MinOrderByAggregateInput
    _sum?: Dimp2024SumOrderByAggregateInput
  }

  export type Dimp2024ScalarWhereWithAggregatesInput = {
    AND?: Dimp2024ScalarWhereWithAggregatesInput | Dimp2024ScalarWhereWithAggregatesInput[]
    OR?: Dimp2024ScalarWhereWithAggregatesInput[]
    NOT?: Dimp2024ScalarWhereWithAggregatesInput | Dimp2024ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dimp2024"> | string
    cnpjDeclarante?: StringWithAggregatesFilter<"Dimp2024"> | string
    nomeDeclarante?: StringWithAggregatesFilter<"Dimp2024"> | string
    competenciaDeclaracao?: StringWithAggregatesFilter<"Dimp2024"> | string
    cnpjCpfCliente?: StringWithAggregatesFilter<"Dimp2024"> | string
    nomeFantasiaCliente?: StringWithAggregatesFilter<"Dimp2024"> | string
    codigoMunicipioCliente?: StringWithAggregatesFilter<"Dimp2024"> | string
    nomeResponsavelCliente?: StringNullableWithAggregatesFilter<"Dimp2024"> | string | null
    cnpjAdquirente?: StringNullableWithAggregatesFilter<"Dimp2024"> | string | null
    dataOperacao?: StringWithAggregatesFilter<"Dimp2024"> | string
    operacaoSplit?: StringWithAggregatesFilter<"Dimp2024"> | string
    bandeiraCartao?: StringNullableWithAggregatesFilter<"Dimp2024"> | string | null
    horaTransacao?: StringWithAggregatesFilter<"Dimp2024"> | string
    valorOperacao?: FloatWithAggregatesFilter<"Dimp2024"> | number
    meioPagamento?: StringWithAggregatesFilter<"Dimp2024"> | string
    codTrans?: StringWithAggregatesFilter<"Dimp2024"> | string
    arquivoReferencia?: StringNullableWithAggregatesFilter<"Dimp2024"> | string | null
    ano?: StringWithAggregatesFilter<"Dimp2024"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    nome?: StringFilter<"User"> | string
    documento?: StringFilter<"User"> | string
    senha?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    documento?: SortOrder
    senha?: SortOrder
    email?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documento?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nome?: StringFilter<"User"> | string
    senha?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
  }, "id" | "documento">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    documento?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    nome?: StringWithAggregatesFilter<"User"> | string
    documento?: StringWithAggregatesFilter<"User"> | string
    senha?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CompetenciaWhereInput = {
    AND?: CompetenciaWhereInput | CompetenciaWhereInput[]
    OR?: CompetenciaWhereInput[]
    NOT?: CompetenciaWhereInput | CompetenciaWhereInput[]
    id?: StringFilter<"Competencia"> | string
    recebida?: BoolFilter<"Competencia"> | boolean
    competencia?: StringFilter<"Competencia"> | string
  }

  export type CompetenciaOrderByWithRelationInput = {
    id?: SortOrder
    recebida?: SortOrder
    competencia?: SortOrder
  }

  export type CompetenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    competencia?: string
    AND?: CompetenciaWhereInput | CompetenciaWhereInput[]
    OR?: CompetenciaWhereInput[]
    NOT?: CompetenciaWhereInput | CompetenciaWhereInput[]
    recebida?: BoolFilter<"Competencia"> | boolean
  }, "id" | "competencia">

  export type CompetenciaOrderByWithAggregationInput = {
    id?: SortOrder
    recebida?: SortOrder
    competencia?: SortOrder
    _count?: CompetenciaCountOrderByAggregateInput
    _max?: CompetenciaMaxOrderByAggregateInput
    _min?: CompetenciaMinOrderByAggregateInput
  }

  export type CompetenciaScalarWhereWithAggregatesInput = {
    AND?: CompetenciaScalarWhereWithAggregatesInput | CompetenciaScalarWhereWithAggregatesInput[]
    OR?: CompetenciaScalarWhereWithAggregatesInput[]
    NOT?: CompetenciaScalarWhereWithAggregatesInput | CompetenciaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Competencia"> | string
    recebida?: BoolWithAggregatesFilter<"Competencia"> | boolean
    competencia?: StringWithAggregatesFilter<"Competencia"> | string
  }

  export type Dimp2020CreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2020UncheckedCreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2020UpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2020UncheckedUpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2020CreateManyInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2020UpdateManyMutationInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2020UncheckedUpdateManyInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2021CreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2021UncheckedCreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2021UpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2021UncheckedUpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2021CreateManyInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2021UpdateManyMutationInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2021UncheckedUpdateManyInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2022CreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2022UncheckedCreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2022UpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2022UncheckedUpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2022CreateManyInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2022UpdateManyMutationInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2022UncheckedUpdateManyInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2023CreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2023UncheckedCreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2023UpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2023UncheckedUpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2023CreateManyInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2023UpdateManyMutationInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2023UncheckedUpdateManyInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2024CreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2024UncheckedCreateInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2024UpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2024UncheckedUpdateInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2024CreateManyInput = {
    id?: string
    cnpjDeclarante: string
    nomeDeclarante: string
    competenciaDeclaracao: string
    cnpjCpfCliente: string
    nomeFantasiaCliente: string
    codigoMunicipioCliente: string
    nomeResponsavelCliente?: string | null
    cnpjAdquirente?: string | null
    dataOperacao: string
    operacaoSplit: string
    bandeiraCartao?: string | null
    horaTransacao: string
    valorOperacao: number
    meioPagamento: string
    codTrans: string
    arquivoReferencia?: string | null
    ano: string
  }

  export type Dimp2024UpdateManyMutationInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type Dimp2024UncheckedUpdateManyInput = {
    cnpjDeclarante?: StringFieldUpdateOperationsInput | string
    nomeDeclarante?: StringFieldUpdateOperationsInput | string
    competenciaDeclaracao?: StringFieldUpdateOperationsInput | string
    cnpjCpfCliente?: StringFieldUpdateOperationsInput | string
    nomeFantasiaCliente?: StringFieldUpdateOperationsInput | string
    codigoMunicipioCliente?: StringFieldUpdateOperationsInput | string
    nomeResponsavelCliente?: NullableStringFieldUpdateOperationsInput | string | null
    cnpjAdquirente?: NullableStringFieldUpdateOperationsInput | string | null
    dataOperacao?: StringFieldUpdateOperationsInput | string
    operacaoSplit?: StringFieldUpdateOperationsInput | string
    bandeiraCartao?: NullableStringFieldUpdateOperationsInput | string | null
    horaTransacao?: StringFieldUpdateOperationsInput | string
    valorOperacao?: FloatFieldUpdateOperationsInput | number
    meioPagamento?: StringFieldUpdateOperationsInput | string
    codTrans?: StringFieldUpdateOperationsInput | string
    arquivoReferencia?: NullableStringFieldUpdateOperationsInput | string | null
    ano?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    nome: string
    documento: string
    senha: string
    email?: string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    nome: string
    documento: string
    senha: string
    email?: string | null
  }

  export type UserUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    nome: string
    documento: string
    senha: string
    email?: string | null
  }

  export type UserUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetenciaCreateInput = {
    id?: string
    recebida?: boolean
    competencia: string
  }

  export type CompetenciaUncheckedCreateInput = {
    id?: string
    recebida?: boolean
    competencia: string
  }

  export type CompetenciaUpdateInput = {
    recebida?: BoolFieldUpdateOperationsInput | boolean
    competencia?: StringFieldUpdateOperationsInput | string
  }

  export type CompetenciaUncheckedUpdateInput = {
    recebida?: BoolFieldUpdateOperationsInput | boolean
    competencia?: StringFieldUpdateOperationsInput | string
  }

  export type CompetenciaCreateManyInput = {
    id?: string
    recebida?: boolean
    competencia: string
  }

  export type CompetenciaUpdateManyMutationInput = {
    recebida?: BoolFieldUpdateOperationsInput | boolean
    competencia?: StringFieldUpdateOperationsInput | string
  }

  export type CompetenciaUncheckedUpdateManyInput = {
    recebida?: BoolFieldUpdateOperationsInput | boolean
    competencia?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type Dimp2020CountOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2020AvgOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2020MaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2020MinOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2020SumOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type Dimp2021CountOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2021AvgOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2021MaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2021MinOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2021SumOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2022CountOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2022AvgOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2022MaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2022MinOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2022SumOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2023CountOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2023AvgOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2023MaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2023MinOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2023SumOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2024CountOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2024AvgOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type Dimp2024MaxOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2024MinOrderByAggregateInput = {
    id?: SortOrder
    cnpjDeclarante?: SortOrder
    nomeDeclarante?: SortOrder
    competenciaDeclaracao?: SortOrder
    cnpjCpfCliente?: SortOrder
    nomeFantasiaCliente?: SortOrder
    codigoMunicipioCliente?: SortOrder
    nomeResponsavelCliente?: SortOrder
    cnpjAdquirente?: SortOrder
    dataOperacao?: SortOrder
    operacaoSplit?: SortOrder
    bandeiraCartao?: SortOrder
    horaTransacao?: SortOrder
    valorOperacao?: SortOrder
    meioPagamento?: SortOrder
    codTrans?: SortOrder
    arquivoReferencia?: SortOrder
    ano?: SortOrder
  }

  export type Dimp2024SumOrderByAggregateInput = {
    valorOperacao?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    documento?: SortOrder
    senha?: SortOrder
    email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    documento?: SortOrder
    senha?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    documento?: SortOrder
    senha?: SortOrder
    email?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CompetenciaCountOrderByAggregateInput = {
    id?: SortOrder
    recebida?: SortOrder
    competencia?: SortOrder
  }

  export type CompetenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    recebida?: SortOrder
    competencia?: SortOrder
  }

  export type CompetenciaMinOrderByAggregateInput = {
    id?: SortOrder
    recebida?: SortOrder
    competencia?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Dimp2020DefaultArgs instead
     */
    export type Dimp2020Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Dimp2020DefaultArgs<ExtArgs>
    /**
     * @deprecated Use Dimp2021DefaultArgs instead
     */
    export type Dimp2021Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Dimp2021DefaultArgs<ExtArgs>
    /**
     * @deprecated Use Dimp2022DefaultArgs instead
     */
    export type Dimp2022Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Dimp2022DefaultArgs<ExtArgs>
    /**
     * @deprecated Use Dimp2023DefaultArgs instead
     */
    export type Dimp2023Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Dimp2023DefaultArgs<ExtArgs>
    /**
     * @deprecated Use Dimp2024DefaultArgs instead
     */
    export type Dimp2024Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Dimp2024DefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetenciaDefaultArgs instead
     */
    export type CompetenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetenciaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}